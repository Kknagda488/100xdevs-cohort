{"version":3,"file":"static/js/3079.0174ab84.chunk.js","mappings":"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","sources":["components/training/quiz/QuizQuestionLister.js","pages/training/QuestionBank.jsx","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AiFillDelete } from \"react-icons/ai\";\nimport { MdAdd } from \"react-icons/md\";\nimport { v4 as uuid_v4 } from \"uuid\";\n// import OptionMapper from \"../batchComponents/OptionMapper\";\nfunction QuizQuestionLister({ setResult }) {\n  // const [newQuestions, setNewQuestions] = useState(allQuestion);\n\n  const [fields, setFields] = useState([\n    {\n      id: uuid_v4(),\n      question: \"\",\n      questionType: \"mcq\",\n      point: \"\",\n      answers: [\"\", \"\"],\n      correctAnswer: \"\",\n    },\n  ]);\n  const [ans, setAns] = useState([]);\n  var questionObject = {\n    id: uuid_v4(),\n    question: \"\",\n    questionType: \"mcq\",\n    point: \"\",\n    answers: [\"\", \"\"],\n    correctAnswer: \"\",\n  };\n\n  var ansObj = \"\";\n  console.log(fields, \"jkdj\");\n  const [obj, setObj] = useState();\n  console.log(fields, \"oiuy\");\n  //console.log(obj);\n  const addOption = (id) => {\n    const index = fields.findIndex((item) => item.id === id);\n\n    let newFields = [...fields];\n    if (index >= 0) {\n      var replaceOption = newFields[index];\n      //newFields.splice(index, 1);\n      replaceOption.answers.push(\"\");\n    } else {\n      console.warn(`Cannot remove : ${id}`);\n    }\n    //var updatedFields = [...newFields];\n    setFields(newFields);\n  };\n  const removeOption = (id, roption) => {\n    const index = fields.findIndex((item) => item.id === id);\n    const optionIndex = fields[index].answers.findIndex(\n      (opts) => opts === roption\n    );\n\n    let newFields = [...fields];\n    if (index >= 0) {\n      var replaceOption = newFields[index].answers.splice(optionIndex, 1);\n      //newFields.splice(index, 1);\n      //replaceOption.answers.push(\"\");\n    } else {\n      console.warn(`Cannot remove : ${id}`);\n    }\n    //var updatedFields = [...newFields];\n    setFields(newFields);\n  };\n  const removeQuestion = (id) => {\n    var doesItemExist;\n\n    const newState = fields.map((item) => {\n      if (item.id === id) {\n        //item.quantity += 1;\n        doesItemExist = true;\n      }\n      //  objects = item;\n      return item;\n    });\n\n    //  console.log(newState);\n\n    if (doesItemExist) {\n      const index = fields.findIndex((item) => item.id === id);\n\n      let newFields = [...fields];\n      if (index >= 0) {\n        var replaceOption = newFields[index];\n        newFields.splice(index, 1);\n      } else {\n        console.warn(`Cannot remove : ${id}`);\n      }\n      //var updatedFields = [...newFields];\n      setFields(newFields);\n    }\n  };\n\n  const RenderQuestions = () => (\n    <ul className=\"flex flex-col w-full my-6 \">\n      <div className=\"w-full  px-4 mx-auto mt-3\">\n        <div className=\"relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded-lg bg-blueGray-100 border-0\">\n          <div className=\"rounded-t bg-white mb-0 px-6 py-6\">\n            <h6 className=\"text-gray-700 w-full text-xl font-bold  \">\n              Add Quetions in QuestionBank\n            </h6>\n          </div>\n          <div className=\"flex-auto px-4 lg:px-10 py-10 pt-0 bg-violet-200\">\n            <div>\n              {fields?.map((question, index) => (\n                <div\n                  className=\"my-4 border-b-2 pb-2 border-sky-500 \"\n                  key={index}\n                >\n                  <div className=\"text-center flex justify-between items-center\">\n                    <h6 className=\"text-blueGray-400 text-sm mt-3 mb-6 font-bold uppercase\">\n                      Question #{index + 1}\n                    </h6>\n                    <button\n                      className=\"bg-sky-500 text-white active:bg-sky-600 h-fit font-bold uppercase text-xs px-4 py-2 rounded shadow hover:shadow-md outline-none focus:outline-none mr-1 ease-linear transition-all duration-150\"\n                      type=\"button\"\n                      onClick={() => removeQuestion(question.id)}\n                    >\n                      Remove Question #{index + 1}\n                    </button>\n                  </div>\n                  <div className=\"flex flex-wrap\">\n                    <div className=\"w-full lg:w-12/12 px-4\">\n                      <div className=\"relative w-full mb-3\">\n                        <label\n                          className=\"block uppercase text-blueGray-600 text-xs font-bold mb-2\"\n                          htmlFor=\"grid-password\"\n                        >\n                          Question\n                        </label>\n                        <input\n                          type=\"text\"\n                          className=\"border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150\"\n                          name=\"question\"\n                          placeholder=\"Question\"\n                          defaultValue={question.question}\n                          onBlur={(e) => {\n                            question.question = e.target.value;\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"w-full lg:w-1/2 px-4\">\n                      <div className=\"relative w-full mb-3\">\n                        <label\n                          className=\"block uppercase text-blueGray-600 text-xs font-bold mb-2\"\n                          htmlFor=\"grid-password\"\n                        >\n                          Question Type\n                        </label>\n                        <select\n                          className=\"border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150\"\n                          required=\"required\"\n                          name=\"questionType\"\n                          defaultValue={question.type}\n                          onChange={(e) => {\n                            question.questionType = e.target.value;\n                            {\n                              question.questionType == \"multiopt\"\n                                ? (question.correctAnswer = [])\n                                : (question.correctAnswer = \"\");\n                            }\n                            question.answers = [\"\", \"\"];\n                            setFields([...fields]);\n                          }}\n                        >\n                          <option value={question.questionType} selected hidden>\n                            {question?.questionType == \"mcq\"\n                              ? \"Multiple Choice\"\n                              : null}{\" \"}\n                            {question?.questionType == \"fib\"\n                              ? \"Fill in the Blanks\"\n                              : null}{\" \"}\n                            {question?.questionType == \"tf\"\n                              ? \"True or False\"\n                              : null}{\" \"}\n                            {question?.questionType == \"multiopt\"\n                              ? \"Multi-Option\"\n                              : null}{\" \"}\n                            {question?.questionType == \"response\"\n                              ? \"Response\"\n                              : null}{\" \"}\n                            {question?.questionType == \"text\" || \"\"\n                              ? \"Select a Type\"\n                              : null}\n                          </option>\n                          <option value=\"mcq\">Multiple Choice</option>\n                          <option value=\"fib\">Fill in the Blanks</option>\n                          <option value=\"tf\">True or False</option>\n                          <option value=\"multiopt\">Multi-Option</option>\n                          <option value=\"response\">Response</option>\n                        </select>\n                      </div>\n                    </div>\n\n                    <div className=\"w-full lg:w-1/2 px-4\">\n                      <div className=\"relative w-full mb-3\">\n                        <label\n                          className=\"block uppercase text-blueGray-600 text-xs font-bold mb-2\"\n                          htmlFor=\"grid-password\"\n                        >\n                          Points\n                        </label>\n                        <input\n                          id=\"input-hide\"\n                          type=\"number\"\n                          className=\"border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150\"\n                          name=\"points\"\n                          placeholder=\"Points\"\n                          defaultValue={question.point}\n                          onWheel={(e) => e.target.blur()}\n                          onBlur={(e) => (question.point = e.target.value)}\n                          required\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <hr className=\"mt-6 border-b-1 border-blueGray-300\" />\n                  <h6 className=\"text-blueGray-400 text-sm mt-3 mb-6 font-bold uppercase\">\n                    Answer Information\n                  </h6>\n                  {question?.questionType !== \"response\" ? (\n                    <>\n                      <button\n                        className=\"bg-sky-500 text-white active:bg-sky-600 font-bold uppercase text-xs px-4 py-2 rounded shadow hover:shadow-md outline-none focus:outline-none mr-1 ease-linear transition-all duration-150\"\n                        type=\"button\"\n                        //  onClick={() => question.answers.push(\"\")}\n                        onClick={() =>\n\n                          addOption(question.id)\n                        }\n                      >\n                        Add Option\n                      </button>\n                      <div className=\"flex  flex-wrap\">\n                        <div className=\"w-full flex flex-col lg:w-6/12 px-4\">\n                          {/* <OptionMapper ans={ans} question={question} /> */}\n                          {question?.answers?.map((opt, i) => {\n                            return (\n                              <div\n                                key={uuid_v4()}\n                                className=\"relative w-full mb-3\"\n                              >\n                                <label\n                                  className=\"block uppercase text-blueGray-600 text-xs font-bold mb-2\"\n                                  htmlFor=\"grid-password\"\n                                >\n                                  Option {i + 1}\n                                </label>\n                                <div className=\"flex \">\n                                  <input\n                                    type=\"text\"\n                                    required\n                                    defaultValue={opt}\n                                    placeholder={`Option ${i + 1}`}\n                                    className=\"border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150\"\n                                    onBlur={(e) =>\n                                      (question.answers[i] = e.target.value)\n                                    }\n                                  />\n\n                                  <button\n                                    type=\"button\"\n                                    title=\"Remove Option\"\n                                    className=\"flex items-center text-red-500 text-md \"\n                                    onClick={() => {\n                                      //var optIndex = question.answers.indexOf(opt);\n                                      //question.answers.splice(optIndex, 1);\n                                      removeOption(question.id, opt);\n                                    }}\n                                  >\n                                    <AiFillDelete className=\"text-xl\" /> #\n                                    {i + 1}\n                                  </button>\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                        <div className=\"w-full lg:w-6/12 px-4\">\n                          <div className=\"relative w-full mb-3\">\n                            <label\n                              className=\"block uppercase text-blueGray-600 text-xs font-bold mb-2\"\n                              htmlFor=\"grid-password\"\n                            >\n                              Correct Option\n                            </label>\n                            {question.questionType == \"multiopt\" ? (\n                              <div className=\"bg-white flex flex-col px-3 py-1 h-full\">\n                                {question?.answers?.map((as, i) => {\n                                  return (\n                                    <div\n                                      key={uuid_v4()}\n                                      className=\"form-check  \"\n                                    >\n                                      <input\n                                        checked={question.correctAnswer.find(\n                                          (id) => id === i + 1\n                                        )}\n                                        className=\" h-4 w-4 text-blue-400 bg-white rounded  bg-no-repeat bg-center bg-contain float-left mr-2 cursor-pointer focus:outline-none transition duration-200 mt-1 align-top\"\n                                        type=\"checkbox\"\n                                        value={`${i + 1}`}\n                                        onChange={(e) => {\n                                          const index =\n                                            question.correctAnswer.indexOf(\n                                              e.target.value\n                                            );\n                                          if (index > -1) {\n                                            question.correctAnswer.splice(\n                                              index,\n                                              1\n                                            );\n                                          } else {\n                                            question.correctAnswer.push(\n                                              parseInt(e.target.value)\n                                            );\n                                          }\n                                        }}\n                                        name={`option#${i + 1}`}\n                                        id={`option#${i + 1}`}\n                                      />\n                                      <label className=\"form-check-label inline-block  text-gray-700 font-semibold \">\n                                        {`Option #${i + 1}`}\n                                      </label>\n\n                                    </div>\n                                  );\n                                })}\n                              </div>\n                            ) : (\n                              <select\n                                className=\"border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150\"\n                                required=\"required\"\n                                name=\"correctOption\"\n                                onBlur={(e) =>\n                                  (question.correctAnswer = e.target.value)\n                                }\n                              >\n                                <option selected disabled hidden value=\"\">\n                                  Select Correct Option\n                                </option>\n                                {question?.answers?.map((as, i) => {\n                                  return (\n                                    <option\n                                      selected={\n                                        i + 1 ==\n                                          parseInt(question.correctAnswer)\n                                          ? \"selected\"\n                                          : null\n                                      }\n                                      value={`${i + 1}`}\n                                      key={uuid_v4()}\n                                    >\n                                      {`option #${i + 1}`}\n                                    </option>\n                                  );\n                                })}\n                              </select>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </>\n                  ) : (\n                    <div className=\"w-full lg:w-12/12 px-4\">\n                      <div className=\"relative w-full mb-3\">\n                        <label\n                          className=\"block uppercase text-blueGray-600 text-xs font-bold mb-2\"\n                          htmlFor=\"grid-password\"\n                        >\n                          Correct Answer\n                        </label>\n                        <input\n                          type=\"text\"\n                          className=\"border-0 px-3 py-3 placeholder-blueGray-300 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring w-full ease-linear transition-all duration-150\"\n                          name=\"correctOption\"\n                          placeholder=\"Enter correct answer\"\n                          defaultValue={question.correctAnswer}\n                          onBlur={(e) =>\n                            (question.correctAnswer = e.target.value)\n                          }\n                        />\n                      </div>\n                    </div>\n                  )}\n\n                  <hr className=\"mt-6 border-b-1 border-blueGray-300\" />\n                </div>\n              ))}\n\n              <div className=\"flex w-full justify-between items-center\">\n                <button\n                  className=\"bg-sky-500  text-white active:bg-sky-600 font-semibold  text-sm px-4 py-2 rounded shadow hover:shadow-md outline-none focus:outline-none mr-1 ease-linear transition-all duration-150\"\n                  type=\"button\"\n                  onClick={() => setFields([...fields, questionObject])}\n                >\n                  Add Question #{fields.length + 1}\n                </button>\n                {fields.length == 0 ? null : (\n                  <button\n                    className=\"bg-sky-500 text-white active:bg-sky-600 font-semibold  text-sm px-4 py-2 rounded shadow hover:shadow-md outline-none focus:outline-none mr-1 ease-linear transition-all duration-150\"\n                    type=\"submit\"\n                    onClick={() => setResult(fields)}\n                  >\n                    Submit & Save\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ul>\n  );\n  return (\n    <div className=\"flex flex-col\">\n      <RenderQuestions />\n    </div>\n  );\n}\n\nexport default QuizQuestionLister;\n","import React, { useState } from \"react\";\r\n// import AddQuestions from \"../components/adminComponents/forms/AddQuestions\";\r\n// import { getSession } from \"next-auth/react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { v4 as uuid_v4 } from \"uuid\"\r\nimport QuizQuestionLister from \"../../components/training/quiz/QuizQuestionLister\";\r\nimport { useAuth } from \"../../context/auth\";\r\n// import { useRouter } from \"next/router\";\r\nfunction QuestionBanks() {\r\n    // const [question, setQuestion] = useState({ result: null });\r\n    // const [questionBunch, setQuestionBunch] = useState([]);\r\n    const { userData } = useAuth()\r\n    //   const router = useRouter();\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const setResult = (values) => {\r\n        var question = values;\r\n\r\n        var empty = [];\r\n        var questionObject = question;\r\n        var quest = question.map((obj) => {\r\n            if (obj.questionType !== \"response\") {\r\n                var a = Object.keys(obj).filter((k) => {\r\n                    if (obj[k] === \"\" || obj[k] === undefined || obj[k] === null) {\r\n                        return empty.push(k);\r\n                    }\r\n                });\r\n                var b = obj.answers.filter((k, i) => {\r\n                    if (k === \"\" || k === undefined || k === null) {\r\n                        var newkey = `option${i + 1}`;\r\n                        return empty.push({ [newkey]: k });\r\n                    }\r\n                });\r\n            } else {\r\n                var resObj = {\r\n                    id: obj.id,\r\n                    question: obj.question,\r\n                    questionType: obj.questionType,\r\n                    point: obj.point,\r\n                };\r\n                var a = Object.keys(resObj).filter((k) => {\r\n                    if (\r\n                        resObj[k] === \"\" ||\r\n                        resObj[k] === undefined ||\r\n                        resObj[k] === null\r\n                    ) {\r\n                        return empty.push(k);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        //var updatedQuestion = { ...questionObject, id: uuid_v4() };\r\n        console.log(empty, \"opiuy\");\r\n        if (empty.length !== 0) {\r\n            toast.error(\"Fill up the required fields\");\r\n            questionObject = [];\r\n        } else {\r\n            question.forEach((element) => {\r\n                var updatedQuestion = { ...element, id: uuid_v4() };\r\n\r\n                addQuestion(updatedQuestion);\r\n                return element;\r\n            });\r\n        }\r\n    };\r\n\r\n    const addQuestion = async (question) => {\r\n        const formData = {\r\n            name: question.question,\r\n            type: question.questionType,\r\n            isRequired: 1,\r\n            options: JSON.stringify(question.answers),\r\n            questionBunch: JSON.stringify(question),\r\n        };\r\n        var response;\r\n        console.log(formData);\r\n        let form = new URLSearchParams(Object.entries(formData)).toString();\r\n        console.log(form);\r\n        response = await fetch(\r\n            `${process.env.REACT_APP_PUBLIC_URL}/api/FormBatchquestions/add?access_token=${userData?.accessToken}`,\r\n            {\r\n                headers: {\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                },\r\n\r\n                method: \"POST\",\r\n                body: form,\r\n            }\r\n        );\r\n\r\n        const data = await response.json();\r\n        console.log(data);\r\n\r\n        if (!response.ok) {\r\n            console.log(\"er\");\r\n            toast.error(data?.error?.message);\r\n        } else {\r\n            console.log(data);\r\n            if (data.code === 404) {\r\n                toast.error(data.msg);\r\n            } else {\r\n                //document.getElementById(\"quiz-form\").reset;\r\n\r\n                setSubmitted(true);\r\n                toast.success(\"Question Added Succesfully !!\");\r\n                // router.push(\"/batch\");\r\n                window.close();\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col w-full mt-10\">\r\n            {/* <AddQuestions\r\n        onSubmit={setResult}\r\n        submitted={submitted}\r\n        setSubmitted={setSubmitted}\r\n      /> */}\r\n            <QuizQuestionLister setResult={setResult} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionBanks;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;"],"names":["_ref","setResult","fields","setFields","useState","id","uuid_v4","question","questionType","point","answers","correctAnswer","ans","setAns","questionObject","console","log","obj","setObj","RenderQuestions","_jsx","className","children","_jsxs","map","index","_question$answers","_question$answers2","_question$answers3","type","onClick","doesItemExist","item","findIndex","newFields","splice","warn","concat","removeQuestion","htmlFor","name","placeholder","defaultValue","onBlur","e","target","value","required","onChange","selected","hidden","onWheel","blur","_Fragment","push","addOption","opt","i","title","removeOption","roption","optionIndex","opts","AiFillDelete","as","checked","find","indexOf","parseInt","disabled","length","userData","useAuth","submitted","setSubmitted","addQuestion","async","formData","isRequired","options","JSON","stringify","questionBunch","response","form","URLSearchParams","Object","entries","toString","fetch","process","accessToken","headers","method","body","data","json","_data$error","ok","code","toast","error","msg","success","window","close","message","QuizQuestionLister","values","empty","keys","filter","k","undefined","newkey","resObj","forEach","element","updatedQuestion","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","slice","unsafeStringify","arr","offset","arguments","buf","native","rnds","random"],"sourceRoot":""}