{"version":3,"file":"static/js/2440.b787d719.chunk.js","mappings":"2LAGA,MA+DA,EA/DgCA,KACxB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,CAC7B,CAAEC,GAAI,EAAGC,YAAa,YAAaC,YAAa,UAAWC,MAAO,MAAOC,YAAa,EAAGC,kBAAmB,GAAIC,iBAAkB,GAAIC,iBAAkB,IACxJ,CAAEP,GAAI,EAAGC,YAAa,YAAaC,YAAa,UAAWC,MAAO,MAAOC,YAAa,EAAGC,kBAAmB,GAAIC,iBAAkB,GAAIC,iBAAkB,IACxJ,CAAEP,GAAI,EAAGC,YAAa,YAAaC,YAAa,UAAWC,MAAO,MAAOC,YAAa,EAAGC,kBAAmB,GAAIC,iBAAkB,GAAIC,iBAAkB,IACxJ,CAAEP,GAAI,EAAGC,YAAa,YAAaC,YAAa,UAAWC,MAAO,MAAOC,YAAa,EAAGC,kBAAmB,GAAIC,iBAAkB,GAAIC,iBAAkB,MAexJC,EAAoBC,IAChBA,EAAIH,iBAAmBG,EAAIF,kBAAoB,EAGnDG,EAA4BA,CAACC,EAASC,KACjCD,EAAUC,GAAYA,EAAY,IAQpCf,EAAKgB,KAAKJ,IAAG,IACfA,EACHK,wBAAyBN,EAAiBC,GAC1CM,wBAAyBP,EAAiBC,GAC1CO,0BAA2BN,EAA0BD,EAAIF,iBAAkBE,EAAIH,kBAC/EW,qBAAsBP,EAA0BD,EAAIL,iBAMxD,OACEc,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,OAAOC,UAAU,QAAUC,UAC7DL,EAAAA,EAAAA,KAACM,EAAAA,GAAQ,CACP3B,KAAMA,EACN4B,qBAAmB,EACnBC,uBAAqB,EACrBC,wBAAsB,EACtBC,QA1CY,CACd,CAAEC,MAAO,cAAeC,WAAY,eAAgBC,KAAM,GAC1D,CAAEF,MAAO,cAAeC,WAAY,eAAgBC,KAAM,GAC1D,CAAEF,MAAO,QAASC,WAAY,QAASC,KAAM,GAC7C,CAAEF,MAAO,cAAeC,WAAY,iBAAkBE,KAAM,SAAUD,KAAM,GAC5E,CAAEF,MAAO,oBAAqBC,WAAY,sBAAuBE,KAAM,SAAUD,KAAM,GACvF,CAAEF,MAAO,mBAAoBC,WAAY,qBAAsBE,KAAM,SAAUD,KAAM,GACrF,CAAEF,MAAO,mBAAoBC,WAAY,qBAAsBE,KAAM,SAAUD,KAAM,IAoCnFE,MAAO,CAAEC,QAASC,EAAAA,GAClBC,UAAW,CACTF,QAAS,CACPG,iBAAiB,OAInB,C","sources":["pages/Reports/ParticipantsBasedReport.jsx"],"sourcesContent":["import { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\nimport React, { useState } from 'react'\r\n\r\nconst ParticipantsBasedReport = () => {\r\n        const [rows, setRows] = useState([\r\n            { id: 1, programName: 'Program A', batchesName: 'Batch 1', month: 'Jan', noOfBatches: 2, countOfAttendance: 50, participantsDay1: 25, participantsDay2: 25 },\r\n            { id: 2, programName: 'Program B', batchesName: 'Batch 2', month: 'Jan', noOfBatches: 3, countOfAttendance: 70, participantsDay1: 35, participantsDay2: 35 },\r\n            { id: 3, programName: 'Program A', batchesName: 'Batch 1', month: 'Feb', noOfBatches: 2, countOfAttendance: 55, participantsDay1: 30, participantsDay2: 25 },\r\n            { id: 4, programName: 'Program B', batchesName: 'Batch 2', month: 'Feb', noOfBatches: 3, countOfAttendance: 75, participantsDay1: 40, participantsDay2: 35 }\r\n        // Add more rows as needed\r\n      ]);\r\n    \r\n      const columns = [\r\n        { field: 'programName', headerName: 'Program Name', flex: 1 },\r\n        { field: 'batchesName', headerName: 'Batches Name', flex: 1 },\r\n        { field: 'month', headerName: 'Month', flex: 1 },\r\n        { field: 'noOfBatches', headerName: 'No. of Batches', type: 'number', flex: 1 },\r\n        { field: 'countOfAttendance', headerName: 'Count of Attendance', type: 'number', flex: 1 },\r\n        { field: 'participantsDay1', headerName: 'Participants Day 1', type: 'number', flex: 1 },\r\n        { field: 'participantsDay2', headerName: 'Participants Day 2', type: 'number', flex: 1 },\r\n        // Add more columns as needed\r\n      ];\r\n    \r\n      const calculateAverage = (row) => {\r\n        return (row.participantsDay1 + row.participantsDay2) / 2;\r\n      };\r\n    \r\n      const calculatePercentageChange = (current, previous) => {\r\n        return ((current - previous) / previous) * 100;\r\n      };\r\n    \r\n      const calculateMonthToMonthChange = () => {\r\n        // Implement logic to calculate M-O-M changes\r\n      };\r\n    \r\n      const getRowsWithCalculations = () => {\r\n        return rows.map((row) => ({\r\n          ...row,\r\n          averageParticipantsDay1: calculateAverage(row),\r\n          averageParticipantsDay2: calculateAverage(row),\r\n          percentChangeParticipants: calculatePercentageChange(row.participantsDay2, row.participantsDay1),\r\n          percentChangeBatches: calculatePercentageChange(row.noOfBatches, /* Previous month batches count */),\r\n        }));\r\n      };\r\n    \r\n      const formattedRows = getRowsWithCalculations();\r\n    \r\n      return (\r\n        <div style={{ height: 400, width: '100%',marginTop:'40px'  }}>\r\n        <DataGrid\r\n          rows={rows}\r\n          disableColumnFilter\r\n          disableColumnSelector\r\n          disableDensitySelector\r\n          columns={columns}\r\n          slots={{ toolbar: GridToolbar }}\r\n          slotProps={{\r\n            toolbar: {\r\n              showQuickFilter: true,\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n      );\r\n    };\r\n\r\nexport default ParticipantsBasedReport"],"names":["ParticipantsBasedReport","rows","setRows","useState","id","programName","batchesName","month","noOfBatches","countOfAttendance","participantsDay1","participantsDay2","calculateAverage","row","calculatePercentageChange","current","previous","map","averageParticipantsDay1","averageParticipantsDay2","percentChangeParticipants","percentChangeBatches","_jsx","style","height","width","marginTop","children","DataGrid","disableColumnFilter","disableColumnSelector","disableDensitySelector","columns","field","headerName","flex","type","slots","toolbar","GridToolbar","slotProps","showQuickFilter"],"sourceRoot":""}