{"version":3,"file":"static/js/4271.181b0bb0.chunk.js","mappings":"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","sources":["components/training/DeletePopCard.jsx","components/training/program/BackButton.jsx","components/parts/BulkUploader.jsx","components/forms/CreateBatch.jsx","components/training/program/programComponents/NominationPeople.jsx","components/training/program/programComponents/ProgramDetails.jsx","components/training/program/programComponents/CreateBatch.jsx","components/forms/UpdateBatch.jsx","components/training/program/programComponents/BatchList.jsx","components/training/program/programComponents/BulkBatchCreate.jsx","components/training/program/ProgramTabs.jsx","components/training/program/ProgramDetails.jsx","components/utils/index.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n    Typography,\r\n} from '@mui/material';\r\n\r\nconst DeletePopCard = ({ title, cancelDelete, confirmDelete }) => {\r\n    return (\r\n        <Dialog open={true} onClose={cancelDelete}>\r\n            <DialogTitle>{title}</DialogTitle>\r\n            <DialogContent>\r\n                <Typography variant=\"body1\">\r\n                    Are you sure you want to delete this item?\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={cancelDelete} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={confirmDelete} color=\"secondary\">\r\n                    Delete\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default DeletePopCard;\r\n","import { useNavigate } from 'react-router-dom';\r\nimport React from 'react'\r\nimport { FaArrowLeft } from 'react-icons/fa'; // Import the desired icon from react-icons\r\n\r\nconst BackButton = ({ setBatchListPop }) => {\r\n    const navigate = useNavigate(); // Import the useNavigate hook from react-router-dom\r\n    const handleClick = () => {\r\n        // setBatchListPop(false);\r\n        navigate(\"/program\")\r\n    };\r\n\r\n    return (\r\n        <button\r\n            className=\"bg-sky-600 h-[25px] w-[102px] m-[10px] px-5 font-[22px] rounded\"\r\n            onClick={handleClick}\r\n        >\r\n            <FaArrowLeft className=\"inline-block mr-2\" /> Back\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default BackButton\r\n","import React, { useState } from \"react\";\r\n// import { useExcelDownloder } from \"react-xls\";\r\nimport readXlsxFile from \"read-excel-file\";\r\nfunction BulkUploader({ setCsv, setButtonR }) {\r\n    // const { ExcelDownloder, Type } = useExcelDownloder();\r\n    const [name, setName] = useState(\"Select a file...\");\r\n\r\n    const handleChange = (e) => {\r\n        if (e.target.files.length) {\r\n            // console.log(e.target.files[0], \"l\");\r\n            setName(e.target.files[0].name);\r\n            readXlsxFile(e.target.files[0]).then((rows) => {\r\n                rows.shift();\r\n                let tutorials = [];\r\n\r\n                rows.forEach((row, i) => {\r\n                    let tutorial = {\r\n                        firstName: row[0],\r\n                        lastName: row[1],\r\n                        email: row[2],\r\n                        employeeId: row[3],\r\n                        mobileNo: row[4],\r\n                        city: row[5],\r\n                        managerName: row[6],\r\n                        managerEmail: row[7],\r\n                        function: row[8],\r\n                        role: row[9],\r\n                        zone: row[10],\r\n                        product: row[11]\r\n                        // password: \"abc123\",\r\n                        // mobile: \"9999999999\",\r\n                    };\r\n\r\n                    tutorials.push(tutorial);\r\n                });\r\n\r\n                console.log(\"tutorials\", JSON.stringify(tutorials));\r\n                setCsv(tutorials);\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"flex flex-col space-y-3\">\r\n            <span\r\n                htmlFor=\"files\"\r\n                className=\"relative flex w-full items-center bg-gray-200 rounded-md cursor-pointer \"\r\n            >\r\n                <input\r\n                    id=\"files\"\r\n                    name=\"files\"\r\n                    className=\"absolute w-full opacity-0\"\r\n                    type=\"file\"\r\n                    accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\r\n                    onChange={handleChange}\r\n                />\r\n                <span className=\"flex rounded-l-lg py-3 text-sm px-5 h-full bg-sky-500 text-white w-fit\">\r\n                    Choose Your File\r\n                </span>\r\n                <p className=\"text-sm font-medium  px-6 text-gray-700\">{name}</p>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BulkUploader;\r\n","\nimport React, { useState } from \"react\";\nimport { AiOutlineFolderAdd } from \"react-icons/ai\";\nimport { CgListTree } from \"react-icons/cg\";\nimport Select from \"react-select\";\nimport BulkUploader from \"../parts/BulkUploader\";\n// import { useExcelDownloder } from \"react-xls\";\nimport { toast } from \"react-toastify\";\nimport moment from \"moment\";\nimport { useAuth } from \"../../context/auth\";\nfunction CreateBatch({\n  programId,\n  nominees,\n  setShowPopup,\n  programDetails,\n  setSelectedNominees,\n  fetchNomineesList,\n}) {\n  console.log(nominees);\n  const { userData } = useAuth()\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    var formData = {};\n    Array.from(e.currentTarget.elements).forEach((field) => {\n      if (!field.name) return;\n      formData[field.name] = field.value;\n    });\n    if (programId) {\n      formData[\"programId\"] = programId;\n    }\n    if (nominees) {\n      formData[\"file\"] = JSON.stringify(nominees);\n    }\n    // return console.log(csv);\n    let form = new URLSearchParams(Object.entries(formData)).toString();\n    const response = await fetch(\n      `${process.env.REACT_APP_PUBLIC_URL}/api/batches/add?access_token=${userData?.accessToken}`,\n      {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        method: \"POST\",\n        body: form,\n      }\n    );\n    const data = await response.json();\n    toast.success(\"Batch created successfully!\");\n    setShowPopup(false);\n    // if (showPopup) {\n    // }\n    fetchNomineesList();\n    setSelectedNominees([]);\n    e.target.reset();\n  };\n  //   const [selectedStatus, setSelectedStatus] = useState([]);\n  //   const [selectedClient, setSelectedClient] = useState([]);\n  //   const [selectedProgram, setSelectedProgram] = useState([]);\n  //   const [buttonR, setButtonR] = useState(false);\n  //   const [buttonD, setButtonD] = useState(false);\n  //   const { ExcelDownloder, Type } = useExcelDownloder();\n  //   const userOptions = [\n  //     { data: 1, label: \"Active\" },\n  //     { data: 0, label: \"InActive\" },\n  //   ];\n  //   const data = {\n  //     batch: [\n  //       {\n  //         fullName: \"\",\n  //         employeeId: \"\",\n  //         referenceCode: \"\",\n  //         branchName: \"\",\n  //       },\n  //     ],\n  //   };\n\n  //   const clientOptions = clientData?.map((client) => {\n  //     return { data: client?.client_id, label: client?.client_name };\n  //   });\n  //   const programOptions = programData?.map((program) => {\n  //     return {\n  //       data: program?.project_id,\n  //       label: `${program?.project_title} ~ ProgramId: ${program?.project_id} `,\n  //     };\n  //   });\n\n  const styles = {\n    container: (base) => ({\n      ...base,\n      flex: 1,\n    }),\n    control: (base) => ({\n      ...base,\n      border: \"1px solid rgb(209 213 219)\",\n      boxShadow: \"none\",\n      \"&:hover\": {\n        border: \"1px solid rgb(17 24 39)\",\n      },\n    }),\n    input: (base) => ({\n      ...base,\n      color: \"rgb(75 85 99)\",\n      paddingLeft: \"6px\",\n      paddingBottom: \"3px\",\n      fontSize: \"1rem\",\n      lineHeight: \"1.25rem\",\n      // opacity: \"0 !important\",\n    }),\n    placeholder: (base) => ({\n      ...base,\n      color: \"#a1a9bb\",\n      paddingLeft: \"6px\",\n\n      fontSize: \"0.870rem\",\n      lineHeight: \"1.25rem\",\n    }),\n  };\n\n  return (\n    <div className=\"flex flex-col w-full justify-center  \">\n      <div className=\"relative py-5 w-full  px-1 \">\n        <div className=\"relative px-4 py-10  rounded-md  bg-white \">\n          <div className=\"w-full mx-auto\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"h-14 w-14 bg-sky-500 rounded-full flex flex-shrink-0 justify-center items-center text-white text-2xl font-semibold\">\n                <CgListTree />\n              </div>\n              <div className=\"block pl-2 font-semibold text-xl self-start text-gray-700\">\n                <h2 className=\"leading-relaxed\">Create a Batch</h2>\n                <p className=\"text-sm text-gray-500 font-normal leading-relaxed\">\n                  Enter the Batch details to display it in Batch List.\n                </p>\n              </div>\n            </div>\n            <form\n              id=\"addpath\"\n              method=\"POST\"\n              onSubmit={handleSubmit}\n              className=\"divide-y divide-gray-200\"\n            >\n              <div className=\"flex flex-col w-full justify-between py-8 text-base leading-6 space-x-4 text-gray-700 sm:text-lg sm:leading-7\">\n                <div className=\"flex flex-col w-full space-y-1\">\n                  <label className=\"leading-loose\">Batch Name*</label>\n                  <input\n                    type=\"text\"\n                    name=\"name\"\n                    className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                    placeholder=\"Batch Name\"\n                    required\n                  />\n\n                  {programDetails.trainingType == \"2\" ? (\n                    <>\n                    </>\n                  ) : (\n                    <>\n                      <label className=\"leading-loose\">Location*</label>\n                      <input\n                        type=\"text\"\n                        name=\"location\"\n                        className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                        placeholder=\"Location\"\n                        required\n                      />\n                    </>\n                  )}\n                  <label className=\"leading-loose\">Batch Start Date *</label>\n                  <input\n                    type=\"date\"\n                    name=\"batchStartDate\"\n                    className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                    placeholder=\"Batch Start Date\"\n                    required\n                  />\n                  <label className=\"leading-loose\">Batch Start Time *</label>\n                  <input\n                    type=\"time\"\n                    name=\"batchStartTime\"\n                    className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                    placeholder=\"Batch Start time\"\n                    required\n                  />\n                  <label className=\"leading-loose\">Batch End Date*</label>\n                  <input\n                    type=\"date\"\n                    name=\"batchEndDate\"\n                    className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                    placeholder=\"Batch End Date\"\n                    required\n                  />\n                  <label className=\"leading-loose\">Batch End Time *</label>\n                  <input\n                    type=\"time\"\n                    name=\"batchEndTime\"\n                    className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                    placeholder=\"Batch End Time\"\n                    required\n                  />\n                  <label className=\"leading-loose\">Status*</label>\n                  <select\n                    name=\"status\"\n                    className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\"\n                  >\n                    <option value=\"1\">Active</option>\n                    <option value=\"0\">In Active</option>\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"py-0 flex items-center  justify-center space-x-4\">\n                <button\n                  type=\"submit\"\n                  className=\"bg-sky-500 flex justify-center items-center w-full text-white px-4 py-3 rounded-md focus:outline-none\"\n                >\n                  Create Batch\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CreateBatch;\n","\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { v4 as uuid_v4 } from \"uuid\";\nimport Utils from \"../../../utils\";\nimport CreateBatch from \"../../../forms/CreateBatch\";\nimport { IoClose } from \"react-icons/io5\";\nimport { BiRefresh } from \"react-icons/bi\";\nimport { AiOutlineDelete } from \"react-icons/ai\";\nimport { useAuth } from \"../../../../context/auth\";\nimport DeletePopCard from \"../../DeletePopCard\";\n\n\nfunction NominationPeople({ programId, programDetails }) {\n  const { userData, signOut } = useAuth()\n  const [pageNo, setPageNo] = useState(1);\n  const [pageLimit, setPageLimit] = useState(30);\n  const [pgindex, setPgindex] = useState(1);\n  const [nominees, setNominees] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [selectedNominees, setSelectedNominees] = useState([]);\n  const [showPopup, setShowPopup] = useState(false);\n  const [showDeletePopup, setShowDeletePopup] = useState(false);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [selectAll, setSelectAll] = useState(false);\n  const [allNominees, setAllNominees] = useState([]);\n\n  const fetchNomineesList = async () => {\n    try {\n      const filter = {\n        pageLimit,\n        pageNo,\n        search,\n      };\n      const params = encodeURIComponent(JSON.stringify(filter));\n      const response = await fetch(\n        `${process.env.REACT_APP_PUBLIC_URL}/api/nominees/list/program/${programId}?filter=${params}&access_token=${userData?.accessToken}`\n      );\n      if (!response.ok) {\n        // get error message from body or default to response statusText\n        const error = (data && data.message) || response.statusText;\n        return Promise.reject(error);\n      }\n      const data = await response.json();\n      // return console.log(data.data.nominees);\n      setAllNominees(data.data.allProgramNominees);\n      setNominees(data.data.allProgramNominees);\n      setPgindex(data.data.lastPage);\n    } catch (error) {\n      console.error(\"There was an error!\", error);\n      if (error === \"Token Expired\" || error === \"Malformed User\") {\n        signOut();\n      }\n    }\n  };\n\n  const next = () => {\n    if (pageNo >= pgindex) {\n      return;\n    } else {\n      setPageNo(pageNo + 1);\n    }\n  };\n  const previous = () => {\n    if (pageNo <= 1) {\n      return;\n    } else {\n      setPageNo(pageNo - 1);\n    }\n  };\n\n  useEffect(() => {\n    if (programId) {\n      fetchNomineesList();\n    }\n  }, [programId, pageLimit, pageNo, search]);\n\n  const handleCheckboxChange = (event) => {\n    const { name } = event.target;\n\n    const employeeId = parseInt(name);\n    setSelectedNominees((prevCheckedItems) =>\n      prevCheckedItems.includes(employeeId)\n        ? prevCheckedItems.filter((item) => item !== employeeId)\n        : [...prevCheckedItems, employeeId]\n    );\n  };\n\n  const handleExport = () => {\n    if (selectedNominees.length === 0) {\n      return toast.error(\"Please select nominees.\");\n    }\n    const employees = [\n      [\"First Name\", \"Last Name\", \"Email\", \"Manager Name\", \"Manager Email\"],\n    ];\n    allNominees.forEach((nom) => {\n      if (selectedNominees.includes(nom.nomineeId)) {\n        employees.push([\n          nom.firstName,\n          nom.lastName,\n          nom.email,\n          nom.managerName,\n          nom.managerEmail,\n        ]);\n      }\n    });\n    Utils.exportAoaToXlsx(\n      employees,\n      programDetails.programName\n    );\n  };\n  const selectedNominessData = [];\n  allNominees.forEach((nom) => {\n    if (selectedNominees.includes(nom.nomineeId)) {\n      selectedNominessData.push({\n        firstName: nom.firstName,\n        lastName: nom.lastName,\n        email: nom.email,\n        mobileNo: nom.mobileNo,\n      });\n    }\n  });\n\n  const handleMailSend = async (e) => {\n    e.preventDefault();\n\n    try {\n      console.log(nominees.length);\n      if (!selectedNominees.length) {\n        return toast.error(\"Please select nominees\");\n      }\n      var formData = {};\n      const selectedNominessData = [];\n      allNominees.forEach((nom) => {\n        if (selectedNominees.includes(nom.nomineeId)) {\n          selectedNominessData.push({\n            firstName: nom.firstName,\n            lastName: nom.lastName,\n            email: nom.email,\n            mobileNo: nom.mobileNo,\n          });\n        }\n      });\n      // return console.log(selectedNominessData);\n      Array.from(e.currentTarget.elements).forEach((field) => {\n        if (!field.name) return;\n        formData[field.name] = field.value;\n      });\n\n      if (selectedNominessData.length) {\n        formData[\"file\"] = JSON.stringify(selectedNominessData);\n      }\n      console.log(formData);\n      const form = new URLSearchParams(Object.entries(formData)).toString();\n      const response = await fetch(\n        `${process.env.REACT_APP_PUBLIC_URL}/api/nominees/sendMail/${programId}?access_token=${userData?.accessToken}`,\n        {\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          },\n          method: \"POST\",\n          body: form,\n        }\n      );\n\n      const data = await response.json();\n      console.log(data);\n      if (!response.ok) {\n        const error = (data && data.message) || response.statusText;\n        throw error;\n      } else if (data.status === \"failure\") {\n        toast.error(data?.msg);\n      } else {\n        toast.success(data.msg);\n        setSelectedNominees([]);\n      }\n      e.target.reset();\n    } catch (error) {\n      console.log(error);\n      console.error(\"There was an error!\", error);\n      if (error === \"Token Expired\") {\n        signOut();\n      }\n    }\n  };\n\n  const handleNomineeDelete = async () => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_PUBLIC_URL}/api/nominees/deleteNominee/${selectedRow.id}?access_token=${userData?.accessToken}`,\n        {\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          },\n          method: \"DELETE\",\n        }\n      );\n      const data = await response.json();\n      console.log(data);\n      if (!response.ok) {\n        const error = (data && data.message) || response.statusText;\n        throw error;\n      } else if (data.status === \"failure\") {\n        toast.error(data?.msg);\n      } else {\n        toast.success(data.msg);\n        setSelectedRow(null);\n        setShowDeletePopup(false);\n        fetchNomineesList();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleSelectAll = (event) => {\n    const isChecked = event.target.checked;\n    if (isChecked) {\n      const result = [];\n      allNominees.forEach((nom) => {\n        if (!selectedNominees.includes(nom.nomineeId)) {\n          result.push(nom.nomineeId);\n        }\n      });\n      setSelectedNominees((prev) => [...prev, ...result]);\n    } else {\n      setSelectedNominees([]);\n    }\n    setSelectAll(isChecked);\n  };\n  console.log(selectedNominees, \"selectedNominees\");\n  return (\n    <div className=\"mx-3\">\n      <div className=\"flex justify-end\">\n        <span\n          style={{ marginTop: \"-10px\", marginBottom: \"10px\" }}\n          className=\"text-sm \"\n        >\n          <BiRefresh\n            className=\"cursor-pointer\"\n            onClick={() => fetchNomineesList()}\n            size={20}\n          />\n        </span>\n      </div>\n      {/* <button\n        className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n        onClick={() => setShowPopup(true)}\n      >\n        Open Form\n      </button> */}\n\n      {showDeletePopup ? (\n        <div className=\"fixed z-30  w-full h-screen top-0 left-0 items-center   bg-gray-800/40\">\n          <div className=\"flex w-full items-start mt-10 justify-center \">\n            <div className=\"relative mx-20 flex flex-col  w-1/2 items-center justify-center bg-white rounded-lg shadow-md px-8 py-2\">\n              <div className=\"absolute z-30 bg-white flex w-full justify-end items-end top-0  p-4 \">\n                {/* <IoClose\n                  onClick={() => {\n                    setPopup(false);\n                  }}\n                  className=\"cursor-pointer text-2xl font-semibold text-black \"\n                /> */}\n              </div>\n              <div\n                id=\"journal-scroll\"\n                className=\"w-full max-h-[32rem] h-fit overflow-y-auto mt-8\"\n              >\n                <DeletePopCard\n                  title={selectedRow.title}\n                  cancelDelete={() => setShowDeletePopup(false)}\n                  confirmDelete={() => handleNomineeDelete(selectedRow.id)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : null}\n\n      {showPopup ? (\n        <div className=\"fixed z-30  w-full h-screen top-0 left-0 items-center   bg-gray-800/40\">\n          <div className=\"flex w-full items-start mt-20 justify-center   h-screen\">\n            <div className=\"relative mx-20 flex flex-col  w-1/2 items-center justify-center bg-white rounded-lg shadow-md px-8 py-2\">\n              <div className=\"absolute z-30 bg-white flex w-full justify-end items-end top-0  p-4 \">\n                <IoClose\n                  onClick={() => setShowPopup(false)}\n                  className=\"cursor-pointer text-xl font-semibold text-black \"\n                />\n              </div>\n              <div\n                id=\"journal-scroll\"\n                className=\"w-full h-[30rem] overflow-y-auto\"\n              >\n                <CreateBatch\n                  programId={programId}\n                  nominees={selectedNominessData}\n                  isPopup={true}\n                  fetchNomineesList={fetchNomineesList}\n                  setShowPopup={setShowPopup}\n                  setSelectedNominees={setSelectedNominees}\n                  programDetails={programDetails}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : null}\n\n      {/* {showPopup && (\n        <div className=\"fixed top-0 left-0 h-screen w-screen bg-gray-900 bg-opacity-50 flex items-center justify-center\">\n          <div className=\"bg-white p-6 rounded shadow-lg\">\n            <h2 className=\"text-lg font-bold mb-3\">Contact Us</h2>\n            <form onSubmit={handleFormSubmit}>\n              <div className=\"mb-4\">\n                <label className=\"block text-gray-700 font-bold mb-2\" htmlFor=\"name\">\n                  Name\n                </label>\n                <input\n                  className=\"rounded shadow-lg py-2 px-3 w-full\"\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  value={formValues.name}\n                  onChange={handleInputChange}\n                />\n              </div>\n              <div className=\"mb-4\">\n                <label className=\"block text-gray-700 font-bold mb-2\" htmlFor=\"email\">\n                  Email\n                </label>\n                <input\n                  className=\"rounded shadow-lg py-2 px-3 w-full\"\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"email\"\n                  value={formValues.email}\n                  onChange={handleInputChange}\n                />\n              </div>\n              <div className=\"mb-4\">\n                <label className=\"block text-gray-700 font-bold mb-2\" htmlFor=\"message\">\n                  Message\n                </label>\n                <textarea\n                  className=\"rounded shadow-lg py-2 px-3 w-full\"\n                  name=\"message\"\n                  id=\"message\"\n                  rows=\"5\"\n                  value={formValues.message}\n                  onChange={handleInputChange}\n                />\n              </div>\n              <div className=\"flex justify-end\">\n                <button\n                  className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2\"\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n                <button\n                  className=\"bg-gray-400 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded\"\n                  onClick={() => setShowPopup(false)}\n                >\n                  Cancel\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )} */}\n      <div className=\"flex flex-row justify-between\">\n        {/* <h5 className=\" text-md font-medium tracking-wide text-gray-700 lg:text-xl \">\n            Nominees\n          </h5> */}\n        <span>Total Nominees: {allNominees?.length || 0}</span>\n        <div className=\"flex align-center\">\n          <div className=\"relative mt-1\">\n            <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none py-2 \">\n              <svg\n                className=\"w-5 h-5 text-gray-500 \"\n                fill=\"currentColor\"\n                viewBox=\"0 0 20 20\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n                  clipRule=\"evenodd\"\n                ></path>\n              </svg>\n            </div>\n            <input\n              type=\"text\"\n              id=\"table-search\"\n              className=\"bg-gray-50 border py-1  border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-80 pl-10 p-2.5  \"\n              placeholder=\"Search for nominee\"\n              onChange={(e) => setSearch(e.target.value)}\n            />\n          </div>\n        </div>\n      </div>\n      {userData.userType === 1 && (\n        <div>\n          <div className=\"flex justify-between mt-2\">\n            <form onSubmit={handleMailSend} className=\"flex space-x-2\">\n              <select\n                className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-30 sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                name=\"type\"\n                required\n              >\n                <option value=\"\">Select Template</option>\n                <option value=\"cancellation\">Cancellation</option>\n                <option value=\"reschedule\">Reschedule</option>\n              </select>\n              <button className=\"bg-green-500 hover:bg-green-700 text-sm text-white font-bold py-2 px-3 rounded\">\n                Send\n              </button>\n            </form>\n            <div>\n              {selectedNominees.length ? (\n                <span className=\"mr-4\">\n                  Selected Nominees: {selectedNominees.length}\n                </span>\n              ) : null}\n              <button\n                className=\"px-2 py-2 mr-2 text-sm bg-green-500 text-white rounded-md\"\n                onClick={() => handleExport()}\n              >\n                Export\n              </button>\n              {selectedNominees.length > 0 && (\n                <button\n                  onClick={() => setShowPopup(true)}\n                  className=\"px-2 py-2 text-sm bg-green-500 text-white rounded-md\"\n                >\n                  Create Batch\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"relative overflow-x-auto shadow-md sm:rounded-lg mt-3\">\n        <table className=\"w-full text-sm text-left text-gray-500 \">\n          <thead className=\"text-md m-4 bg-sky-600 text-white   \">\n            <tr>\n              {userData.userType === 1 && (\n                <th scope=\"col\" className=\"px-6 py-3\">\n                  <input\n                    type=\"checkbox\"\n                    onChange={handleSelectAll}\n                    className=\"form-checkbox h-4 w-4 text-blue-600\"\n                    checked={selectAll}\n                  ></input>\n                </th>\n              )}\n              <th scope=\"col\" className=\"px-6 py-3\">\n                Sr no.\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3\">\n                Name\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3\">\n                Email\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3\">\n                Supervisor Name\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3\">\n                Supervisor Email\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3\">\n                Batch Assigned\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3\">\n                Actions\n              </th>\n              {/* <th scope=\"col\" className=\"px-6 py-3\">\n                Batch\n              </th> */}\n\n              {/* <th scope=\"col\" className=\"px-6 py-3\">\n                Action\n              </th> */}\n            </tr>\n          </thead>\n          {nominees.map((data, i) => {\n            return (\n              <tbody key={uuid_v4()}>\n                <tr className=\"bg-white border-b\">\n                  {userData.userType === 1 && (\n                    <td className=\"px-6 py-4 text-gray-900\">\n                      <input\n                        type=\"checkbox\"\n                        name={data.nomineeId}\n                        checked={selectedNominees.includes(data.nomineeId)}\n                        onChange={handleCheckboxChange}\n                      />\n                    </td>\n                  )}\n                  <td className=\"px-6 py-4 text-gray-900\">{i + 1}</td>\n                  <th\n                    scope=\"row\"\n                    className=\"flex flex-row items-center px-6 py-4 font-medium text-gray-900  w-44\"\n                  >\n                    {data.firstName} {data.lastName}\n                  </th>\n                  <td className=\"px-6 py-4 text-gray-900\">{data.email}</td>\n                  <td className=\"px-6 py-4 text-gray-900\">\n                    {data.managerName}\n                  </td>\n                  <td className=\"px-6 py-4 text-gray-900\">\n                    {data.managerEmail}\n                  </td>\n                  <td className=\"px-6 py-4 text-gray-900\">\n                    {data.batch ? data.batch.name : \"-\"}\n                  </td>\n                  <div\n                    className=\"text-red-700 flex justify-center items-center hover:underline cursor-pointer\"\n                    onClick={() => {\n                      setShowDeletePopup(true);\n                      setSelectedRow({\n                        title: `${data.firstName} ${data.lastName}`,\n                        id: data.nomineeId,\n                      });\n                    }}\n                  >\n                    <AiOutlineDelete color=\"red\" size={20} />\n                  </div>\n                  {/* <th\n                    scope=\"row\"\n                    className=\"px-6 py-4 font-medium text-gray-900  whitespace-nowrap\"\n                  >\n                    {data.batch ? data.batch.name : \"-\"}\n                  </th> */}\n                </tr>\n              </tbody>\n            );\n          })}\n        </table>\n      </div>\n      <div className=\"flex flex-row justify-around mt-10 items-center  \">\n        <span className=\"text-sm flex text-gray-700 \">\n          {/* <p>Total</p>\n          <span className=\" px-1 font-normal tracking-wide text-gray-900 \">\n           // {totalCount}\n          </span>\n          <p> Questions </p> */}\n        </span>\n        <div className=\"flex\">\n          <div className=\"dropdown flex items-center relative\">\n            <p>Show</p>\n            <span className=\"bg-gray-100 text-gray-700 mx-2  font-normal tracking-wide rounded inline-flex items-center\">\n              <select\n                className=\"bg-transparent px-3 py-2  outline-none \"\n                value={pageLimit}\n                onChange={(e) => {\n                  setPageLimit(e.target.value);\n                  setPageNo(1);\n                }}\n              >\n                <option className=\"mr-1\">5</option>\n                <option className=\"mr-1\">10</option>\n                <option className=\"mr-1\">20</option>\n                <option className=\"mr-1\">30</option>\n                <option className=\"mr-1\">40</option>\n                <option className=\"mr-1\">50</option>\n                <option className=\"mr-1\">100</option>\n                <option className=\"mr-1\">250</option>\n                <option className=\"mr-1\">500</option>\n              </select>\n            </span>\n            <p>Entries</p>\n          </div>\n        </div>\n\n        <div>\n          <a\n            onClick={() => previous()}\n            className={` ${pageNo === 1\n              ? \"hidden\"\n              : \"inline-flex items-center py-2 px-4 ml-3 text-sm font-medium text-gray-700 bg-gray-200 cursor-pointer rounded-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700   \"\n              }`}\n          >\n            Previous\n          </a>\n\n          <a\n            onClick={() => next()}\n            className={` ${pageNo >= pgindex\n              ? \"hidden\"\n              : \"inline-flex items-center py-2 px-4 ml-3 text-sm font-medium text-gray-700 cursor-pointer bg-gray-200 rounded-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700   \"\n              }`}\n          >\n            Next\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default NominationPeople;\n","import moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport React from \"react\";\nimport { useAuth } from \"../../../../context/auth\";\n\nconst ProgramDetails = ({ programDetails }) => {\n  const { userData } = useAuth()\n  console.log(\"Program Details:\" + userData.userType);\n  return (\n    //     <div className=\"relative overflow-x-auto shadow-md sm:rounded-lg mt-3\">\n    //         <table className=\"w-full text-sm text-left text-gray-500 \">\n    //   <thead  className=\"text-md m-4 bg-sky-600 text-white\">\n    //     <tr>\n    //       <th className=\"px-4 py-2 border\">Sr. No.</th>\n    //       <th className=\"px-4 py-2 border\">Client Name</th>\n    //       <th className=\"px-4 py-2 border\">Program Name</th>\n    //       <th className=\"px-4 py-2 border\">Program Date</th>\n    //       <th className=\"px-4 py-2 border\">Trainer Assigned</th>\n    //       <th className=\"px-4 py-2 border\">Seat Count</th>\n    //     </tr>\n    //   </thead>\n    //   <tbody>\n    //     <tr>\n    //       <td className=\"px-4 py-2 border\">1</td>\n    //       <td className=\"px-4 py-2 border\">IDFC</td>\n    //       <td className=\"px-4 py-2 border\">Program Name</td>\n    //       <td className=\"px-4 py-2 border\">22 Jan 2023</td>\n    //       <td className=\"px-4 py-2 border\">John Doe</td>\n    //       <td className=\"px-4 py-2 border\">25</td>\n    //     </tr>\n    //     <tr>\n    //     <td className=\"px-4 py-2 border\">2</td>\n    //       <td className=\"px-4 py-2 border\">IDFC</td>\n    //       <td className=\"px-4 py-2 border\">Program Name</td>\n    //       <td className=\"px-4 py-2 border\">22 Jan 2023</td>\n    //       <td className=\"px-4 py-2 border\">John Doe</td>\n    //       <td className=\"px-4 py-2 border\">25</td>\n    //     </tr>\n    //     <tr>\n    //     <td className=\"px-4 py-2 border\">3</td>\n    //       <td className=\"px-4 py-2 border\">IDFC</td>\n    //       <td className=\"px-4 py-2 border\">Program Name</td>\n    //       <td className=\"px-4 py-2 border\">22 Jan 2023</td>\n    //       <td className=\"px-4 py-2 border\">John Doe</td>\n    //       <td className=\"px-4 py-2 border\">25</td>\n    //     </tr>\n    //   </tbody>\n    // </table>\n\n    //     </div>\n\n    <div>\n      <div className=\"flex justify-end\">\n        {userData.userType === 1 && (\n          <Link\n            to={{\n              pathname: `UpdateProgram/${programDetails.id}`,\n            }}\n          >\n            {/* <Link href={`program/UpdateProgram/${programDetails.id}`}> */}\n\n            <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n              Edit\n            </button>\n          </Link>\n        )}\n      </div>\n      <div\n        style={{ color: \"#4b5563\" }}\n        className=\"flex flex-col text-base font-medium\"\n      >\n        {/* <a\n          target=\"_blank\"\n          href={`http://localhost:3000/nominee/nominee-form?programId=${programDetails.teamId}`}\n        >{`http://localhost:3000/nominee/nominee-form?programId=${programDetails.teamId}`}</a> */}\n        <div className=\"flex mb-2\">\n          <div className=\"w-1/3 pr-2 \">Client Name</div>\n          <div className=\"w-2/3 \"> {programDetails.clientName}</div>\n        </div>\n        <div className=\"flex mb-2\">\n          <div className=\"w-1/3 pr-2\">Program Name</div>\n          <div className=\"w-2/3\"> {programDetails.programName}</div>\n        </div>\n        <div className=\"flex mb-2\">\n          <div className=\"w-1/3 pr-2\">Program Start Date/Time</div>\n          <div className=\"w-2/3\">\n            {moment(\n              `${moment(programDetails.programStartDate).format(\n                \"YYYY-MM-DD\"\n              )} ${programDetails.programStartTime}`\n            ).format(\"Do MMMM YYYY hh:mm a\")}\n          </div>\n        </div>\n        <div className=\"flex mb-2\">\n          <div className=\"w-1/3 pr-2\">Program End Date/Time</div>\n          <div className=\"w-2/3\">\n            {moment(\n              `${moment(programDetails.programEndDate).format(\"YYYY-MM-DD\")} ${programDetails.programEndTime\n              }`\n            ).format(\"Do MMMM YYYY hh:mm a\")}\n          </div>\n        </div>\n        <div className=\"flex mb-2\">\n          <div className=\"w-1/3 pr-2\">Program Type</div>\n          {programDetails.programType == 1 ? \"Open\" : null}\n          {programDetails.programType == 0 ? \"Close\" : null}\n        </div>\n        {programDetails.programType == \"1\" ? (\n          <div className=\"flex mb-2\">\n            <div className=\"w-1/3 pr-2\">Nomination End Date/Time</div>\n            <div className=\"w-2/3\">\n              {/* {moment(programDetails.programDateTime).format(\n              \"Do MMMM YYYY hh:mm a\"\n            )} */}\n              {moment(\n                `${moment(programDetails.nominationDate).format(\n                  \"YYYY-MM-DD\"\n                )} ${programDetails.nominationTime}`\n              ).format(\"Do MMMM YYYY hh:mm a\")}\n            </div>\n          </div>\n        ) : null}\n        <div className=\"flex mb-2\">\n          <div className=\"w-1/3 pr-2\">Training Mode</div>\n          {programDetails.trainingType === 1 ? \"Class room training\" : null}\n          {programDetails.trainingType === 2 ? \"Virtual training\" : null}\n        </div>\n        {programDetails.trainingType === 1 ? (\n          <div className=\"flex mb-2\">\n            <div className=\"w-1/3 pr-2\">Location</div>\n            {programDetails.location}\n          </div>\n        ) : null}\n\n        {/* {programDetails.trainingType === 2 ? (\n          <div className=\"flex mb-2\">\n            <div className=\"w-1/3 pr-2\">Classroom session link</div>\n            {programDetails.meetingLink}\n          </div>\n        ) : null} */}\n\n        {/* <div className=\"flex mb-2\">\n          <div className=\"w-1/3 pr-2\">Interval Days</div>\n          <div className=\"w-2/3\">{programDetails.intervalDays}</div>\n        </div> */}\n      </div>\n\n      {userData.userType === 1 ? (\n        <>\n          {programDetails.programType == \"1\" ? (\n            <div style={{ color: \"#4b5563\" }} className=\"flex\">\n              <div className=\"w-1/3 pr-2 font-medium\">Registration Link</div>\n              <div className=\"w-1/3\">\n                <a\n                  href={`/nominee-form/${programDetails.id}`}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {`${process.env.REACT_APP_PUBLIC_URL}/nominee-form/${programDetails.id}`}\n                </a>\n              </div>\n              {/* <div className=\"flex mb-2\">\n            <div className=\"w-1/3 pr-2\">Venue</div>\n            <div className=\"w-2/3\">\n            {programDetails.venue ? programDetails.venue : \"-\"}\n            </div>\n          </div> */}\n            </div>\n          ) : null}\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nexport default ProgramDetails;\n","import React, { useState } from \"react\";\nimport BulkUploader from \"../../../parts/BulkUploader\";\nimport { toast } from \"react-toastify\";\nimport moment from \"moment\";\nimport { useAuth } from \"../../../../context/auth\";\nconst CreateBatch = ({ programId, programDetails }) => {\n  // const router = useRouter();\n  const [csv, setCsv] = useState([]);\n  const { userData, signOut } = useAuth()\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    var formData = {};\n    Array.from(e.currentTarget.elements).forEach((field) => {\n      if (!field.name) return;\n      formData[field.name] = field.value;\n    });\n    if (programId) {\n      formData[\"programId\"] = programId;\n    }\n    if (csv) {\n      formData[\"file\"] = JSON.stringify(csv);\n    }\n    console.log(csv);\n    let form = new URLSearchParams(Object.entries(formData)).toString();\n    const response = await fetch(\n      `${process.env.REACT_APP_PUBLIC_URL}/api/batches/add?access_token=${userData?.accessToken}`,\n      {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n\n        method: \"POST\",\n        body: form,\n      }\n    );\n    const data = await response.json();\n    toast.success(\"Batch created successfully!\");\n\n    e.target.reset();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div className=\"flex flex-col mt-3 justify-center\">\n          <div className=\"flex flex-wrap\">\n            <div className=\"w-1/2 px-2\">\n              <label className=\"leading-loose\">Batch Name*</label>\n              <input\n                type=\"text\"\n                name=\"name\"\n                className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                placeholder=\"Batch Name\"\n                required\n              />\n            </div>\n            {programDetails.trainingType == \"1\" ? (\n              <div className=\"w-1/2 px-2\">\n                <label className=\"leading-loose\">Location*</label>\n                <input\n                  type=\"text\"\n                  name=\"location\"\n                  className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                  placeholder=\"Location\"\n                  required\n                />\n              </div>\n            ) : null}\n            <div className=\"w-1/2 px-2\">\n              <label className=\"leading-loose\">Batch Start Date*</label>\n              <input\n                type=\"date\"\n                name=\"batchStartDate\"\n                className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                required\n              />\n            </div>\n            <div className=\"w-1/2 px-2\">\n              <label className=\"leading-loose\">Batch Start Time*</label>\n              <input\n                type=\"time\"\n                name=\"batchStartTime\"\n                className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                required\n              />\n            </div>\n            <div className=\"w-1/2 px-2\">\n              <label className=\"leading-loose\">Batch End Date*</label>\n              <input\n                type=\"date\"\n                name=\"batchEndDate\"\n                className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                required\n              />\n            </div>\n            <div className=\"w-1/2 px-2\">\n              <label className=\"leading-loose\">Batch End Time*</label>\n              <input\n                type=\"time\"\n                name=\"batchEndTime\"\n                className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                required\n              />\n            </div>\n          </div>\n          <div className=\"w-full px-2\">\n            <label className=\"leading-loose\">Status*</label>\n            <select\n              placeholder=\"Select status\"\n              name=\"status\"\n              required\n              className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\"\n            >\n              <option value=\"1\">Active</option>\n              <option value=\"0\">In Active</option>\n            </select>\n          </div>\n          <div className=\"w-full px-2\">\n            <label className=\"leading-loose\">Excel File*</label>\n            <BulkUploader setCsv={setCsv} />\n          </div>\n\n          <button\n            className=\"flex w-fit mt-5 px-6 py-3 text-white text-sm font-medium\n                    bg-green-500 items-center rounded-md\"\n            type=\"submit\"\n          >\n            Create Batch\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default CreateBatch;\n","\nimport React, { useEffect, useState } from \"react\";\nimport { AiOutlineFolderAdd } from \"react-icons/ai\";\nimport { CgListTree } from \"react-icons/cg\";\nimport Select from \"react-select\";\nimport moment from \"moment\";\nimport { toast } from \"react-toastify\";\nimport { useAuth } from \"../../context/auth\";\nfunction UpdateBatch({\n  batchId,\n  setShowPopup,\n  fetchBatchList,\n  programDetails,\n}) {\n  const [batchData, setBatchData] = useState({});\n  const { userData, signOut } = useAuth()\n  const fetchBatch = async () => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_PUBLIC_URL}/api/batches/batchDetails/${batchId}?access_token=${userData?.accessToken}`\n\n        // const response = await fetch(\n        //     `${process.env.REACT_APP_PUBLIC_UR}/api/batches/edit/${batchId}?access_token=${session?.user?.accessToken}`,\n      );\n      const data = await response.json();\n      console.log(data.data + \"fetchBatch\");\n      setBatchData(data.data);\n\n      if (!response.ok) {\n        // get error message from body or default to response statusText\n        const error = (data && data.message) || response.statusText;\n        return Promise.reject(error);\n      }\n    } catch (error) {\n      console.error(\"There was an error!\", error);\n      if (error === \"Token Expired\") {\n        signOut();\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchBatch();\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    var formData = {};\n    Array.from(e.currentTarget.elements).forEach((field) => {\n      if (!field.name) return;\n      formData[field.name] = field.value;\n    });\n    // if (programId) {\n    //   formData[\"programId\"] = programId;\n    // }\n    // if (nominees) {\n    //   formData[\"file\"] = JSON.stringify(nominees);\n    // }\n    // return console.log(csv);\n    let form = new URLSearchParams(Object.entries(formData)).toString();\n    const response = await fetch(\n      `${process.env.REACT_APP_PUBLIC_URL}/api/batches/edit/${batchId}?access_token=${userData?.accessToken}`,\n      {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        method: \"POST\",\n        body: form,\n      }\n    );\n    const data = await response.json();\n    toast.success(\"Batch updated successfully!\");\n    setShowPopup(false);\n    // if (showPopup) {\n    // }\n    fetchBatchList();\n  };\n  //   const [selectedStatus, setSelectedStatus] = useState([]);\n  //   const [selectedClient, setSelectedClient] = useState([]);\n  //   const [selectedProgram, setSelectedProgram] = useState([]);\n  //   const [buttonR, setButtonR] = useState(false);\n  //   const [buttonD, setButtonD] = useState(false);\n  //   const { ExcelDownloder, Type } = useExcelDownloder();\n  //   const userOptions = [\n  //     { data: 1, label: \"Active\" },\n  //     { data: 0, label: \"InActive\" },\n  //   ];\n  //   const data = {\n  //     batch: [\n  //       {\n  //         fullName: \"\",\n  //         employeeId: \"\",\n  //         referenceCode: \"\",\n  //         branchName: \"\",\n  //       },\n  //     ],\n  //   };\n\n  //   const clientOptions = clientData?.map((client) => {\n  //     return { data: client?.client_id, label: client?.client_name };\n  //   });\n  //   const programOptions = programData?.map((program) => {\n  //     return {\n  //       data: program?.project_id,\n  //       label: `${program?.project_title} ~ ProgramId: ${program?.project_id} `,\n  //     };\n  //   });\n\n  const styles = {\n    container: (base) => ({\n      ...base,\n      flex: 1,\n    }),\n    control: (base) => ({\n      ...base,\n      border: \"1px solid rgb(209 213 219)\",\n      boxShadow: \"none\",\n      \"&:hover\": {\n        border: \"1px solid rgb(17 24 39)\",\n      },\n    }),\n    input: (base) => ({\n      ...base,\n      color: \"rgb(75 85 99)\",\n      paddingLeft: \"6px\",\n      paddingBottom: \"3px\",\n      fontSize: \"1rem\",\n      lineHeight: \"1.25rem\",\n      // opacity: \"0 !important\",\n    }),\n    placeholder: (base) => ({\n      ...base,\n      color: \"#a1a9bb\",\n      paddingLeft: \"6px\",\n\n      fontSize: \"0.870rem\",\n      lineHeight: \"1.25rem\",\n    }),\n  };\n\n  return (\n    <div className=\"flex flex-col w-full justify-center  \">\n      <div className=\"relative py-5 w-full  px-1 \">\n        <div className=\"relative px-4 py-10  rounded-md  bg-white \">\n          <div className=\"w-full mx-auto\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"h-14 w-14 bg-sky-500 rounded-full flex flex-shrink-0 justify-center items-center text-white text-2xl font-semibold\">\n                <CgListTree />\n              </div>\n              <div className=\"block pl-2 font-semibold text-xl self-start text-gray-700\">\n                <h2 className=\"leading-relaxed\">Update Batch</h2>\n                <p className=\"text-sm text-gray-500 font-normal leading-relaxed\">\n                  Enter new batch details.\n                </p>\n              </div>\n            </div>\n            <form\n              id=\"addpath\"\n              method=\"POST\"\n              onSubmit={handleSubmit}\n              className=\"divide-y divide-gray-200\"\n            >\n              <div className=\"flex flex-col w-full justify-between py-8 text-base leading-6 space-x-4 text-gray-700 sm:text-lg sm:leading-7\">\n                <div className=\"flex flex-col w-full space-y-1\">\n                  <label className=\"leading-loose\">Batch Name*</label>\n                  <input\n                    type=\"text\"\n                    name=\"name\"\n                    className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                    placeholder=\"Batch Name\"\n                    defaultValue={batchData.name}\n                    required\n                  />\n                  {batchData?.program?.trainingType == \"1\" ? (\n                    <>\n                      <label className=\"leading-loose\">Location*</label>\n                      <input\n                        type=\"text\"\n                        name=\"location\"\n                        className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                        placeholder=\"Location\"\n                        defaultValue={batchData.location}\n                        required\n                      />\n                    </>\n                  ) : null}\n                  <label className=\"leading-loose\">Status*</label>\n                  <select\n                    placeholder=\"Select status\"\n                    name=\"status\"\n                    className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\"\n                  >\n                    <option\n                      value=\"1\"\n                      selected={batchData.status == 1 ? true : false}\n                    >\n                      Active\n                    </option>\n                    <option\n                      value=\"0\"\n                      selected={batchData.status == 0 ? true : false}\n                    >\n                      In Active\n                    </option>\n                  </select>\n                  <label className=\"leading-loose\">Batch Start Date*</label>\n                  <input\n                    type=\"date\"\n                    name=\"batchStartDate\"\n                    className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                    placeholder=\"Batch start date\"\n                    defaultValue={\n                      batchData.batchStartDate\n                        ? moment(batchData.batchStartDate).format(\"YYYY-MM-DD\")\n                        : \"\"\n                    }\n                    required\n                  />\n                  <label className=\"leading-loose\">Batch Start Time*</label>\n                  <input\n                    type=\"time\"\n                    name=\"batchStartTime\"\n                    className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                    placeholder=\"Batch start time\"\n                    defaultValue={batchData.batchStartTime}\n                    required\n                  />\n                  <label className=\"leading-loose\">Batch End Date*</label>\n                  <input\n                    type=\"date\"\n                    name=\"batchEndDate\"\n                    className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                    placeholder=\"Batch End Date\"\n                    defaultValue={\n                      batchData.batchEndDate\n                        ? moment(batchData.batchEndDate).format(\"YYYY-MM-DD\")\n                        : \"\"\n                    }\n                    required\n                  />\n                  <label className=\"leading-loose\">Batch End Time*</label>\n                  <input\n                    type=\"time\"\n                    name=\"batchEndTime\"\n                    className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n                    placeholder=\"Batch start time\"\n                    defaultValue={batchData.batchEndTime}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"py-0 flex items-center  justify-center space-x-4\">\n                <button\n                  type=\"submit\"\n                  className=\"bg-sky-500 flex justify-center items-center w-full text-white px-4 py-3 rounded-md focus:outline-none\"\n                >\n                  Update\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UpdateBatch;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { v4 as uuid_v4 } from \"uuid\";\nimport moment from \"moment\";\nimport { BiRefresh } from \"react-icons/bi\";\nimport { IoClose } from \"react-icons/io5\";\nimport { AiOutlineDelete, AiOutlineEdit, AiOutlineFundView } from \"react-icons/ai\";\nimport { toast } from \"react-toastify\";\nimport DeletePopupCard from \"../../DeletePopCard\";\nimport UpdateBatch from \"../../../forms/UpdateBatch\";\nimport { useAuth } from \"../../../../context/auth\";\nfunction BatchList({ programId, programDetails }) {\n  // const [, updateState] = React.useState();\n  //   const forceUpdate = React.useCallback(() => updateState({}), []);\n  //   console.\n\n  //   const update = () => {\n  //     // calling the forceUpdate() method\n  //     this.forceUpdate();\n  //     console.log(\"rendering...\");\n  //  };\n  const [selectedRow, setSelectedRow] = useState({\n    title: \"\",\n    id: \"\",\n  })\n  const { userData, signOut } = useAuth()\n  const [pageNo, setPageNo] = useState(1);\n  const [pageLimit, setPageLimit] = useState(5);\n  const [pgindex, setPgindex] = useState(1);\n  const [batches, setBacthes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n  const [batchId, setBatchId] = useState(0);\n  const [emailTemplate, setEmailTemplate] = useState(\"\")\n  const [popup, setPopup] = useState(false)\n  function openPopup(id) {\n    setBatchId(id);\n    setShowPopup(true);\n  }\n  const fetchBatchList = async () => {\n    try {\n      const filter = {\n        pageLimit,\n        pageNo,\n        search,\n      };\n      const params = encodeURIComponent(JSON.stringify(filter));\n      const response = await fetch(\n        `${process.env.REACT_APP_PUBLIC_URL}/api/batches/list/${programId}?filter=${params}&access_token=${userData?.accessToken}`\n      );\n      // check for error response\n      if (!response.ok) {\n        // get error message from body or default to response statusText\n        const error = (data && data.message) || response.statusText;\n        return Promise.reject(error);\n      }\n      const data = await response.json();\n      // return console.log(data.data);\n      setBacthes(data.data);\n    } catch (error) {\n      console.error(\"There was an error!\", error);\n      if (error === \"Token Expired\" || error === \"Malformed User\") {\n        signOut();\n      }\n    }\n  };\n\n  const sendManagerMail = async (e) => {\n    e.preventDefault()\n    console.log(emailTemplate)\n    try {\n\n      if (emailTemplate == \"1\") {\n        const response = await fetch(\n          `${process.env.REACT_APP_PUBLIC_URL}/api/programs/sendMangerMail?access_token=${userData?.accessToken}&programId=${programId}`\n        );\n        const data = await response.json()\n        if (data.status == \"success\") {\n          setEmailTemplate(\"\")\n          return toast.success(data.msg)\n        } else {\n          return toast.error(data.msg)\n        }\n      }\n\n      if (emailTemplate == \"2\") {\n        const response = await fetch(\n          `${process.env.REACT_APP_PUBLIC_URL}/api/programs/sendManagerReminderMail?access_token=${userData?.accessToken}&programId=${programId}&programDate=${programDetails.programStartDate}`\n        );\n        const data = await response.json()\n        if (data.status == \"success\") {\n          setEmailTemplate(\"\")\n          return toast.success(data.msg)\n        } else {\n          return toast.error(data.msg)\n        }\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (programId) {\n      fetchBatchList();\n    }\n  }, [programId]);\n  const handleBatchDelete = async () => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_PUBLIC_URL}/api/batches/deleteBatch/${selectedRow.id}?access_token=${userData.accessToken}`,\n        {\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          },\n\n          method: \"Delete\",\n        }\n      );\n      const data = await response.json();\n      if (!response.ok) {\n        // get error message from body or default to response statusText\n        const error = (data && data.message) || response.statusText;\n        throw error;\n      } else if (data.code === 400) {\n        toast.error(data.msg);\n      } else {\n        toast.success(data.msg);\n        // fetchProgramList();\n        fetchBatchList()\n        setPopup(false);\n      }\n    } catch (error) {\n      console.error(\"There was an error!\", error);\n      if (error === \"Token Expired\" || error === \"Malformed User\") {\n        signOut();\n      }\n    }\n  };\n\n  return (\n    <div className=\"mx-3 \">\n      <div className=\"flex items-center space-x-2 justify-end\">\n        <form onSubmit={sendManagerMail} className=\"flex items-center space-x-2 justify-end\">\n          <select value={emailTemplate}\n            className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900  sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\n            required\n            onChange={(e) => setEmailTemplate(e.target.value)}\n          >\n            <option value=\"\">Select Manager mail</option>\n            <option value=\"1\">Manager invitation mail</option>\n            <option value=\"2\">Manager reminder mail</option>\n          </select>\n          <button className=\"bg-green-500 hover:bg-green-700 text-sm text-white font-bold py-2 px-3 rounded\" type=\"submit\">Send</button>\n        </form>\n        <span className=\"text-sm\">\n          <BiRefresh\n            className=\"cursor-pointer\"\n            onClick={() => fetchBatchList()}\n            size={20}\n          />\n        </span>\n      </div>\n      {popup ? (\n        <div className=\"fixed z-30  w-full h-screen top-0 left-0 items-center   bg-gray-800/40\">\n          <div className=\"flex w-full items-start mt-10 justify-center \">\n            <div className=\"relative mx-20 flex flex-col  w-1/2 items-center justify-center bg-white rounded-lg shadow-md px-8 py-2\">\n              <div className=\"absolute z-30 bg-white flex w-full justify-end items-end top-0  p-4 \">\n                {/* <IoClose\n                  onClick={() => {\n                    setPopup(false);\n                  }}\n                  className=\"cursor-pointer text-2xl font-semibold text-black \"\n                /> */}\n              </div>\n              <div\n                id=\"journal-scroll\"\n                className=\"w-full max-h-[32rem] h-fit overflow-y-auto mt-8\"\n              >\n                <DeletePopupCard\n                  title={selectedRow.title}\n                  cancelDelete={() => setPopup(true)}\n                  confirmDelete={() => handleBatchDelete(selectedRow.id)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : null}\n      {showPopup ? (\n        <div className=\"fixed z-30  w-full h-screen top-0 left-0 items-center   bg-gray-800/40\">\n          <div className=\"flex w-full items-start mt-20 justify-center   h-screen\">\n            <div className=\"relative mx-20 flex flex-col  w-1/2 items-center justify-center bg-white rounded-lg shadow-md px-8 py-2\">\n              <div className=\"absolute z-30 bg-white flex w-full justify-end items-end top-0  p-4 \">\n                <IoClose\n                  onClick={() => setShowPopup(false)}\n                  className=\"cursor-pointer text-xl font-semibold text-black \"\n                />\n              </div>\n              <div\n                id=\"journal-scroll\"\n                className=\"w-full h-[30rem] overflow-y-auto\"\n              >\n                <UpdateBatch\n                  batchId={batchId}\n                  // nominees={selectedNominessData}\n                  // session={session}\n                  isPopup={true}\n                  setShowPopup={setShowPopup}\n                  fetchBatchList={fetchBatchList}\n                  programDetails={programDetails}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : null}\n      <div className=\"flex flex-row justify-between\">\n        <h5 className=\" text-md font-medium tracking-wide text-gray-700 lg:text-xl \">\n          Batches\n        </h5>\n        {/* <button onClick={update}>Force re-render</button> */}\n        {/* <div className=\"flex align-center\">\n          <div className=\"relative mt-1 mr-4 \">\n            <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none py-2 \">\n              <svg\n                className=\"w-5 h-5 text-gray-500 \"\n                fill=\"currentColor\"\n                viewBox=\"0 0 20 20\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n                  clipRule=\"evenodd\"\n                ></path>\n              </svg>\n            </div>\n            <input\n              type=\"text\"\n              id=\"table-search\"\n              className=\"bg-gray-50 border py-1  border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-80 pl-10 p-2.5  \"\n              placeholder=\"Search for batch\"\n              onChange={(e) => setSearch(e.target.value)}\n            />\n          </div>\n        </div> */}\n      </div>\n      <div className=\"relative overflow-x-auto shadow-md sm:rounded-lg mt-3\">\n        <table className=\"w-full text-sm text-left text-gray-500 \">\n          <thead className=\"text-md m-4 bg-sky-600 text-white   \">\n            <tr>\n              {/* <th scope=\"col\" className=\"px-6 py-3\"></th */}\n              <th scope=\"col\" className=\"px-6 py-3\">\n                Sr.No\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3\">\n                Batch Name\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3\">\n                Location\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3\">\n                Start Date time\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3\">\n                End Date time\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3\">\n                Status\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3\">\n                Action\n              </th>\n\n              {/* <th scope=\"col\" className=\"px-6 py-3\">\n                Action\n              </th> */}\n            </tr>\n          </thead>\n          {batches?.map((data, i) => {\n            return (\n              <tbody key={uuid_v4()}>\n                <tr className=\"bg-white border-b  \">\n                  {/* <td className=\"px-6 py-4 text-gray-900\">\n                    <input type=\"checkbox\" />\n                  </td> */}\n                  <td className=\"px-6 py-4 text-gray-900\">{i + 1}</td>\n                  <th\n                    scope=\"row\"\n                    // className=\"flex flex-row items-center px-6 py-4 font-medium text-gray-900  w-44\"\n                    className=\"px-6 py-4 text-gray-900\"\n                  >\n                    {data.name}\n                  </th>\n                  <td className=\"px-6 py-4 text-gray-900\">\n                    {\" \"}\n                    {data.location ? data.location : \"-\"}\n                  </td>\n                  <th\n                    scope=\"row\"\n                    className=\"px-6 py-4 font-medium text-gray-900  whitespace-nowrap\"\n                  >\n                    {moment(data.batchStartDate).format(\"Do MMM YYYY\")}{\" \"}\n                    {moment(data.batchStartTime, \"HH:mm:ss\").format(\"hh:mm a\")}\n                  </th>\n                  <th\n                    scope=\"row\"\n                    className=\"px-6 py-4 font-medium text-gray-900  whitespace-nowrap\"\n                  >\n                    {data.batchEndDate\n                      ? moment(data.batchEndDate).format(\"Do MMM YYYY\")\n                      : \"-\"}{\" \"}\n                    {data.batchEndTime\n                      ? moment(data.batchEndTime, \"HH:mm:ss\").format(\"hh:mm a\")\n                      : \"-\"}\n                  </th>\n                  <th\n                    scope=\"row\"\n                    className=\"px-6 py-4 font-medium text-gray-900  whitespace-nowrap\"\n                  >\n                    {data.status == \"1\" ? (\n                      <span className=\"bg-green-100 text-green-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300\">\n                        Active\n                      </span>\n                    ) : (\n                      <span className=\"bg-red-100 text-red-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded dark:bg-red-900 dark:text-red-300\">\n                        In Active\n                      </span>\n                    )}\n                  </th>\n                  <th\n                    scope=\"row\"\n                    className=\"px-6 py-4 font-medium text-gray-900  whitespace-nowrap\"\n                  >\n                    {/* <div\n                      className=\"text-red-700 mr-4 hover:underline cursor-pointer\"\n                      onClick={() => {\n                        // setPopup(true);\n                        // setSelectedRow({\n                        //   title: program.programName,\n                        //   id: program.id,\n                        // });\n                      }}\n                    >\n                      <AiOutlineDelete color=\"red\" />\n                    </div>\n\n                    <div className=\"text-gray-700 mr-4 hover:underline cursor-pointer\">\n                      <Link to={`/batch/${data.batchId}`}>\n                        <AiOutlineFundView />\n                      </Link>\n                    </div>\n\n\n\n                    {userData.userType !== 7 && (\n                      <div className=\"text-gray-700 mr-4 hover:underline cursor-pointer\">\n                        <button\n                          onClick={() => openPopup(data.batchId)}\n                          className=\"\"\n                        >\n                          <AiOutlineEdit />\n                        </button>\n                      </div>\n\n                    )} */}\n                    <div className=\"flex items-center\">\n                      <div className=\"text-red-700 mr-4 hover:underline cursor-pointer\">\n                        <button onClick={() => {\n                          setPopup(true);\n                          setSelectedRow({\n                            title: data.name,\n                            id: data.batchId,\n                          })\n                        }}>\n                          <AiOutlineDelete size={24} color=\"red\" />\n                        </button>\n\n                      </div>\n\n                      <div className=\"text-gray-700 mr-4 hover:underline cursor-pointer\">\n                        <Link to={`/batch/${data.batchId}`}>\n                          <AiOutlineFundView size={24} />\n                        </Link>\n                      </div>\n\n                      {userData.userType !== 7 && (\n                        <div className=\"text-gray-700 mr-4 hover:underline cursor-pointer\">\n                          <button onClick={() => openPopup(data.batchId)}>\n                            <AiOutlineEdit size={24} />\n                          </button>\n                        </div>\n                      )}\n                    </div>\n                  </th>\n                </tr>\n              </tbody>\n            );\n          })}\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default BatchList;\n","import React, { useState } from \"react\";\r\nimport BulkUploader from \"../../../parts/BulkUploader\";\r\nimport { toast } from \"react-toastify\";\r\nimport moment from \"moment\";\r\nimport { useAuth } from \"../../../../context/auth\";\r\nconst BulkBatchCreate = ({ programId, programDetails }) => {\r\n    // const router = useRouter();\r\n    const [csv, setCsv] = useState([]);\r\n    const [dataCsv, setDataCsv] = useState([]);\r\n\r\n    const { userData, signOut } = useAuth()\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        var formData = {};\r\n        Array.from(e.currentTarget.elements).forEach((field) => {\r\n            if (!field.name) return;\r\n            formData[field.name] = field.value;\r\n        });\r\n        if (programId) {\r\n            formData[\"programId\"] = programId;\r\n        }\r\n        if (csv) {\r\n            formData[\"file\"] = JSON.stringify(csv);\r\n        }\r\n        console.log(csv);\r\n        let form = new URLSearchParams(Object.entries(formData)).toString();\r\n        const response = await fetch(\r\n            `${process.env.REACT_APP_PUBLIC_URL}/api/batches/bulkBathCreate?access_token=${userData?.accessToken}`,\r\n            {\r\n                headers: {\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                },\r\n\r\n                method: \"POST\",\r\n                body: form,\r\n            }\r\n        );\r\n        const data = await response.json();\r\n        toast.success(\"Batch created successfully!\");\r\n\r\n        e.target.reset();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"flex flex-col mt-3 justify-center\">\r\n                    <div className=\"flex flex-wrap\">\r\n                        <div className=\"w-1/2 px-2\">\r\n                            <label className=\"leading-loose\">Batch Length</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"length\"\r\n                                className=\"px-4 py-2 border focus:ring-gray-500 focus:border-gray-900 w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600\"\r\n                                placeholder=\"Batch Length\"\r\n                                required\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"w-1/2 px-2\">\r\n                            <label className=\"leading-loose\">Batch Data File</label>\r\n                            <BulkUploader setCsv={setDataCsv} />\r\n                        </div>\r\n\r\n                    </div>\r\n                    {/* <div className=\"w-full px-2\">\r\n                        <label className=\"leading-loose\">Batch Data File</label>\r\n                        <BulkUploader setCsv={setCsv} />\r\n                    </div> */}\r\n\r\n\r\n                    <div className=\"w-full px-2\">\r\n                        <label className=\"leading-loose\">User File*</label>\r\n                        <BulkUploader setCsv={setCsv} />\r\n                    </div>\r\n\r\n                    <button\r\n                        className=\"flex w-fit mt-5 px-6 py-3 text-white text-sm font-medium\r\n                    bg-green-500 items-center rounded-md\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Create Batch\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BulkBatchCreate;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { FaUserCircle } from \"react-icons/fa\";\r\nimport { VscFeedback } from \"react-icons/vsc\";\r\nimport { MdContentCopy, MdOutlineFormatListBulleted } from \"react-icons/md\";\r\nimport { TbClipboardList } from \"react-icons/tb\";\r\n\r\nimport NominationPeople from \"./programComponents/NominationPeople\";\r\nimport ProgramDetails from \"./programComponents/ProgramDetails\";\r\nimport CreateBatch from \"./programComponents/CreateBatch\";\r\nimport { AiFillNotification } from \"react-icons/ai\";\r\nimport { BsFillInfoCircleFill } from \"react-icons/bs\";\r\nimport { FaList } from \"react-icons/fa\";\r\nimport { useAuth } from \"../../../context/auth\";\r\n// import AnnouncementList from \"../programComponents/AnnouncementList\";\r\nimport BatchList from \"./programComponents/BatchList\";\r\nimport BulkBatchCreate from \"./programComponents/BulkBatchCreate\";\r\n\r\nconst ProgramTabs = ({\r\n  setBatchListPop,\r\n  peoplelist,\r\n  questionList,\r\n  id,\r\n  schedulePop,\r\n  setSchedulePop,\r\n  batchData,\r\n  next,\r\n  previous,\r\n  pgindex,\r\n  page,\r\n  totalCount,\r\n  setRefresher,\r\n  setLimit,\r\n  setPage,\r\n  setSearch,\r\n  getOneBatch,\r\n  templateList,\r\n}) => {\r\n  const [openTab, setOpenTab] = useState(1);\r\n  const { userData } = useAuth();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex flex-wrap\">\r\n        <div className=\"w-full    rounded\">\r\n          <div className=\"border-b border-gray-200  mx-5 \">\r\n            <ul className=\"flex flex-wrap space-x-3   text-sm font-medium text-center text-gray-500 \">\r\n              <li className=\"mr-1 cursor-pointer\">\r\n                <span\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    setOpenTab(1);\r\n                  }}\r\n                  className={\r\n                    \"inline-flex p-3  rounded-t-lg   border-b-2  items-center\" +\r\n                    (openTab === 1\r\n                      ? ` border-sky-600 text-sky-600`\r\n                      : `border-transparent text-gray-500`)\r\n                  }\r\n                >\r\n                  <BsFillInfoCircleFill className=\"text-xl mr-2\" />\r\n                  Program Details\r\n                </span>\r\n              </li>\r\n              {/* <li className=\"mr-1 cursor-pointer\">\r\n                <span\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    setOpenTab(2);\r\n                  }}\r\n                  className={\r\n                    \"inline-flex p-3  rounded-t-lg   border-b-2  items-center\" +\r\n                    (openTab === 2\r\n                      ? ` border-sky-600 text-sky-600`\r\n                      : `border-transparent text-gray-500`)\r\n                  }\r\n                >\r\n                  <AiFillNotification className=\"text-xl mr-2\" />\r\n                  Announcement List\r\n                </span>\r\n              </li> */}\r\n              {/* <li className=\"mr-2 cursor-pointer\">\r\n                <span\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    setOpenTab(2);\r\n                  }}\r\n                  className={\r\n                    \"inline-flex p-4  rounded-t-lg  border-b-2  items-center\" +\r\n                    (openTab === 2\r\n                      ? ` border-sky-600 text-sky-600`\r\n                      : `border-transparent text-gray-500`)\r\n                  }\r\n                >\r\n                  <TbClipboardList className=\"text-xl mr-2\" />\r\n                  Venue\r\n                </span>\r\n              </li> */}\r\n              {batchData.programType == \"1\" ? (\r\n                <li className=\"mr-1 cursor-pointer\">\r\n                  <span\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      setOpenTab(3);\r\n                    }}\r\n                    className={\r\n                      \"inline-flex p-3  rounded-t-lg  border-b-2  items-center\" +\r\n                      (openTab === 3\r\n                        ? ` border-sky-600 text-sky-600`\r\n                        : `border-transparent text-gray-500`)\r\n                    }\r\n                  >\r\n                    <FaUserCircle className=\"text-xl mr-2\" />\r\n                    Nominees\r\n                  </span>\r\n                </li>\r\n              ) : null}\r\n              {userData.userType === 1 && (\r\n                <li className=\"mr-1 cursor-pointer\">\r\n                  <span\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      setOpenTab(4);\r\n                    }}\r\n                    className={\r\n                      \"inline-flex p-3  rounded-t-lg  border-b-2  items-center\" +\r\n                      (openTab === 4\r\n                        ? ` border-sky-600 text-sky-600`\r\n                        : `border-transparent text-gray-500`)\r\n                    }\r\n                  >\r\n                    <VscFeedback className=\"text-xl mr-2\" />\r\n                    {/* <Link href='/batch'> Batch</Link> */}\r\n                    Batch\r\n                  </span>\r\n                </li>\r\n              )}\r\n              <li className=\"mr-1 cursor-pointer\">\r\n                <span\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    setOpenTab(5);\r\n                  }}\r\n                  className={\r\n                    \"inline-flex p-3  rounded-t-lg  border-b-2  items-center\" +\r\n                    (openTab === 5\r\n                      ? ` border-sky-600 text-sky-600`\r\n                      : `border-transparent text-gray-500`)\r\n                  }\r\n                >\r\n                  <FaList className=\"text-xl mr-2\" />\r\n                  {/* <Link href='/batch'> Batch</Link> */}\r\n                  Batch List\r\n                </span>\r\n              </li>\r\n              <li className=\"mr-1 cursor-pointer\">\r\n                <span\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    setOpenTab(6);\r\n                  }}\r\n                  className={\r\n                    \"inline-flex p-3  rounded-t-lg  border-b-2  items-center\" +\r\n                    (openTab === 6\r\n                      ? ` border-sky-600 text-sky-600`\r\n                      : `border-transparent text-gray-500`)\r\n                  }\r\n                >\r\n                  <FaList className=\"text-xl mr-2\" />\r\n                  {/* <Link href='/batch'> Batch</Link> */}\r\n                  Bulk Batch Create\r\n                </span>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"relative flex flex-col min-w-0 break-words \">\r\n            <div className=\"px-4 py-5 flex-auto h-fit\">\r\n              <div className=\"tab-content tab-space\">\r\n                <div className={openTab === 1 ? \"block \" : \"hidden\"} id=\"link1\">\r\n                  {/* <Schedule\r\n                    schedulePop={schedulePop}\r\n                    setSchedulePop={setSchedulePop}\r\n                    id={id}\r\n                    batchData={batchData}\r\n                    openTab={openTab}\r\n                  /> */}\r\n                  <ProgramDetails\r\n                    // session={session}\r\n                    programDetails={batchData}\r\n                  />\r\n                </div>\r\n                {/* <div className={openTab === 2 ? \"block \" : \"hidden\"} id=\"link1\">\r\n                  <AnnouncementList\r\n                    programId={batchData.id}\r\n                    session={session}\r\n                  />\r\n                </div> */}\r\n                {batchData.programType == \"1\" ? (\r\n                  <div\r\n                    className={openTab === 3 ? \"block\" : \"hidden\"}\r\n                    id=\"link3\"\r\n                  >\r\n                    {/* <Assesment\r\n                      next={next}\r\n                      previous={previous}\r\n                      pgindex={pgindex}\r\n                      page={page}\r\n                      totalCount={totalCount}\r\n                      setLimit={setLimit}\r\n                      setPage={setPage}\r\n                      setSearch={setSearch}\r\n                      questionList={questionList}\r\n                      id={id}\r\n                      setRefresher={setRefresher}\r\n                      templateList={templateList}\r\n                    /> */}\r\n                    <NominationPeople\r\n                      programId={batchData.id}\r\n                      // session={session}  \r\n                      programDetails={batchData}\r\n                    />\r\n                  </div>\r\n                ) : null}\r\n                <div className={openTab === 4 ? \"block\" : \"hidden\"} id=\"link3\">\r\n                  <CreateBatch\r\n                    programId={batchData.id}\r\n                    // session={session}\r\n                    programDetails={batchData}\r\n                  />\r\n                </div>\r\n                <div className={openTab === 5 ? \"block\" : \"hidden\"} id=\"link3\">\r\n                  <BatchList\r\n                    programId={batchData.id}\r\n                    // session={session}\r\n                    programDetails={batchData}\r\n                  />\r\n                </div>\r\n                <div className={openTab === 6 ? \"block\" : \"hidden\"} id=\"link3\">\r\n                  <BulkBatchCreate\r\n                    programId={batchData.id}\r\n                    // session={session}\r\n                    programDetails={batchData}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default function TabsRender({\r\n  peoplelist,\r\n  questionList,\r\n  id,\r\n  batchData,\r\n  schedulePop,\r\n  setSchedulePop,\r\n  next,\r\n  previous,\r\n  pgindex,\r\n  page,\r\n  totalCount,\r\n  setRefresher,\r\n  setLimit,\r\n  setPage,\r\n  setSearch,\r\n  templateList,\r\n  getOneBatch,\r\n}) {\r\n  return (\r\n    <>\r\n      <ProgramTabs\r\n        peoplelist={peoplelist}\r\n        id={id}\r\n        batchData={batchData}\r\n        questionList={questionList}\r\n        schedulePop={schedulePop}\r\n        setSchedulePop={setSchedulePop}\r\n        next={next}\r\n        previous={previous}\r\n        pgindex={pgindex}\r\n        page={page}\r\n        totalCount={totalCount}\r\n        setLimit={setLimit}\r\n        setPage={setPage}\r\n        templateList={templateList}\r\n        setSearch={setSearch}\r\n        setRefresher={setRefresher}\r\n        getOneBatch={getOneBatch}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport TabsRender from \"./ProgramTabs\";\r\nimport { useAuth } from \"../../../context/auth\";\r\nimport BackButton from \"./BackButton\";\r\n// import { signOut } from \"next-auth/react\";\r\n\r\nfunction ProgramDetails({\r\n\r\n  id,\r\n  setBatchListPop,\r\n  batchData,\r\n  schedulePop,\r\n  setSchedulePop,\r\n  getOneBatch,\r\n}) {\r\n  const [peoplelist, setPeopleList] = useState([]);\r\n  const [questionList, setQuestionList] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [limit, setLimit] = useState(5);\r\n  const [page, setPage] = useState(0);\r\n  const [totalCount, setTotalCount] = useState();\r\n  const [programDetails, setProgramDetails] = useState(null);\r\n  const { userData, signOut } = useAuth()\r\n  const [refresher, setRefresher] = useState(null);\r\n  const [templateList, setTemplateList] = useState([]);\r\n  //${process.env.REACT_APP_PUBLIC_URL}/api/Teams/getAllUserInTeam/%7Bid%7D?filter=%7B%22limit%22%3A%22%22,%22start%22%3A%22%22,%22search%22%3A%22%22%7D&access_token=${process.env.REACT_APP_PUBLIC_URL}/api/Teams/getAllUserInTeam/%7Bid%7D?filter=%7B%22limit%22%3A%22%22,%22start%22%3A%22%22,%22search%22%3A%22%22%7D&access_token=\r\n  const getpeoplelist = async () => {\r\n    const formData = { Id: id };\r\n    var response;\r\n\r\n    let form = new URLSearchParams(Object.entries(formData)).toString();\r\n\r\n    response = await fetch(\r\n      `${process.env.REACT_APP_PUBLIC_URL}/api/Teams/getAllUserInTranieeTeam/%7Bid%7D?filter=%7B%22limit%22%3A${limit},%22start%22%3A${page},%22search%22%3A%22${search}%22%7D&access_token=${userData?.accessToken}`,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n\r\n        method: \"POST\",\r\n        body: form,\r\n      }\r\n    );\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      const error = (data && data?.message) || response.statusText;\r\n      return Promise.reject(error);\r\n    } else {\r\n      console.log(data);\r\n      if (data.code === 404) {\r\n        console.error(data.msg);\r\n      } else {\r\n        setPeopleList(data.data);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getProgramDetails = async () => { };\r\n\r\n  useEffect(() => {\r\n    if (id !== null) {\r\n      getpeoplelist();\r\n      getQuestionData();\r\n      getTemplateData();\r\n    }\r\n  }, [id, batchData, search, limit, page, refresher]);\r\n  // console.log(questionList, \"l\");\r\n  const getQuestionData = () => {\r\n    fetch(\r\n      `${process.env.REACT_APP_PUBLIC_URL}/api/FormBatchquestions/list?filter=%7B%22limit%22%3A${limit},%22start%22%3A${page},%22search%22%3A%22${search}%22%7D&access_token=${userData?.accessToken}`\r\n    )\r\n      .then(async (response) => {\r\n        const data = await response.json();\r\n\r\n        // check for error response\r\n        if (!response.ok) {\r\n          // get error message from body or default to response statusText\r\n          const error = (data && data.message) || response.statusText;\r\n          return Promise.reject(error);\r\n        }\r\n\r\n        setQuestionList(data.data.list);\r\n        setTotalCount(data.data.totalCount);\r\n      })\r\n      .catch((error) => {\r\n        setQuestionList([]);\r\n        console.error(\"There was an error!\", error);\r\n        if (error === \"Token Expired\") {\r\n          signOut();\r\n        }\r\n      });\r\n  };\r\n  const getTemplateData = () => {\r\n    fetch(\r\n      `${process.env.REACT_APP_PUBLIC_URL}/api/templateQuestions/listofTranieeBatchTemplate?filter=%7B%22limit%22%3A2000000,%22start%22%3A%22%22,%22search%22%3A%22%22%7D&access_token=${userData?.accessToken}`\r\n    )\r\n      .then(async (response) => {\r\n        const data = await response.json();\r\n\r\n        // check for error response\r\n        if (!response.ok) {\r\n          // get error message from body or default to response statusText\r\n          const error = (data && data.message) || response.statusText;\r\n          return Promise.reject(error);\r\n        }\r\n\r\n        setTemplateList(data.data.list);\r\n        setTotalCount(data.data.totalCount);\r\n      })\r\n      .catch((error) => {\r\n        setTemplateList([]);\r\n        console.error(\"There was an error!\", error);\r\n        if (error === \"Token Expired\") {\r\n          signOut();\r\n        }\r\n      });\r\n  };\r\n  const npages = totalCount;\r\n  const pgindex = npages - 5;\r\n  // const pgindex = npages;\r\n  const next = () => {\r\n    if (totalCount % limit == 0) {\r\n      if (page < pgindex) {\r\n        setPage(page + 1);\r\n        //console.log(\"max page\" ,pgindex)\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n\r\n    // if the number is odd\r\n    else {\r\n      if (page < npages) {\r\n        setPage(page + 1);\r\n        //console.log(\"else max page\" ,npages)\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n  };\r\n  const previous = () => {\r\n    if (page <= 0) {\r\n      return;\r\n    } else {\r\n      setPage(page - 1);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"flex w-full   bg-white rounded-md flex-col\">\r\n      <BackButton programId={setBatchListPop} />\r\n      <div className=\"w-full py-4\">\r\n        <span className=\"flex cursor-pointer items-center justify-between px-5  text-2xl font-semibold text-gray-600   border-gray-200\">\r\n          <p>{batchData.programName}</p>\r\n        </span>\r\n\r\n        {/* <span className=\"flex cursor-pointer items-center justify-between px-5  text-2xl font-semibold text-gray-600   border-gray-200\">\r\n          <p>{batchData?.programName} </p>\r\n          <div className=\"flex w-fit space-x-2\">\r\n\r\n            <Link\r\n              href={`/livebatchtracking/batch&id=${id}&batch&name=${batchData.teamName}&trackingid=${id}`}\r\n            >\r\n              <a target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <button className=\"flex w-fit px-4 py-2 text-white text-sm font-medium bg-green-500 items-center rounded-md\">\r\n                  Live Tracking\r\n                </button>\r\n              </a>\r\n            </Link>\r\n            <Link href={`/batch/${id}`}>\r\n              <a target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <button\r\n                  className=\"flex w-fit px-6 py-2 text-white text-sm font-medium\r\n          bg-green-500 items-center rounded-md\"\r\n                >\r\n                  Reports\r\n                </button>\r\n              </a>\r\n            </Link>\r\n          </div>\r\n        </span> */}\r\n        <TabsRender\r\n          id={id}\r\n          batchData={batchData}\r\n          questionList={questionList}\r\n          peoplelist={peoplelist}\r\n          schedulePop={schedulePop}\r\n          setSchedulePop={setSchedulePop}\r\n          next={next}\r\n          previous={previous}\r\n          pgindex={pgindex}\r\n          page={page}\r\n          totalCount={totalCount}\r\n          setLimit={setLimit}\r\n          setPage={setPage}\r\n          setSearch={setSearch}\r\n          setRefresher={setRefresher}\r\n          templateList={templateList}\r\n          getOneBatch={getOneBatch}\r\n        // session={session}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProgramDetails;\r\n","import * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nexport default class Utils {\r\n    static exportToXlsx(apiData, fileName) {\r\n        const fileType =\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".xlsx\";\r\n        const ws = XLSX.utils.json_to_sheet(apiData);\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    }\r\n\r\n    static exportAoaToXlsx(apiData, fileName) {\r\n        const fileType =\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const fileExtension = \".xlsx\";\r\n        const ws = XLSX.utils.aoa_to_sheet(apiData);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    }\r\n}\r\n"],"names":["_ref","title","cancelDelete","confirmDelete","_jsxs","Dialog","open","onClose","children","_jsx","DialogTitle","DialogContent","Typography","variant","DialogActions","Button","onClick","color","setBatchListPop","navigate","useNavigate","className","handleClick","FaArrowLeft","setCsv","setButtonR","name","setName","useState","htmlFor","id","type","accept","onChange","e","target","files","length","readXlsxFile","then","rows","shift","tutorials","forEach","row","i","tutorial","firstName","lastName","email","employeeId","mobileNo","city","managerName","managerEmail","function","role","zone","product","push","console","log","JSON","stringify","programId","nominees","setShowPopup","programDetails","setSelectedNominees","fetchNomineesList","userData","useAuth","CgListTree","method","onSubmit","async","preventDefault","formData","Array","from","currentTarget","elements","field","value","form","URLSearchParams","Object","entries","toString","response","fetch","concat","process","accessToken","headers","body","json","toast","success","reset","placeholder","required","trainingType","_Fragment","signOut","pageNo","setPageNo","pageLimit","setPageLimit","pgindex","setPgindex","setNominees","search","setSearch","selectedNominees","showPopup","showDeletePopup","setShowDeletePopup","selectedRow","setSelectedRow","selectAll","setSelectAll","allNominees","setAllNominees","filter","params","encodeURIComponent","ok","error","data","message","statusText","Promise","reject","allProgramNominees","lastPage","useEffect","handleCheckboxChange","event","parseInt","prevCheckedItems","includes","item","selectedNominessData","nom","nomineeId","style","marginTop","marginBottom","BiRefresh","size","DeletePopCard","status","msg","handleNomineeDelete","IoClose","CreateBatch","isPopup","fill","viewBox","xmlns","fillRule","d","clipRule","userType","handleExport","employees","Utils","exportAoaToXlsx","programName","scope","isChecked","checked","result","prev","map","batch","AiOutlineDelete","uuid_v4","Link","to","pathname","clientName","moment","programStartDate","format","programStartTime","programEndDate","programEndTime","programType","nominationDate","nominationTime","location","href","rel","csv","BulkUploader","_batchData$program","batchId","fetchBatchList","batchData","setBatchData","fetchBatch","defaultValue","program","selected","batchStartDate","batchStartTime","batchEndDate","batchEndTime","batches","setBacthes","setBatchId","emailTemplate","setEmailTemplate","popup","setPopup","DeletePopupCard","code","handleBatchDelete","UpdateBatch","AiOutlineFundView","openPopup","AiOutlineEdit","dataCsv","setDataCsv","ProgramTabs","peoplelist","questionList","schedulePop","setSchedulePop","next","previous","page","totalCount","setRefresher","setLimit","setPage","getOneBatch","templateList","openTab","setOpenTab","BsFillInfoCircleFill","FaUserCircle","VscFeedback","FaList","ProgramDetails","NominationPeople","BatchList","BulkBatchCreate","TabsRender","_ref2","setPeopleList","setQuestionList","limit","setTotalCount","setProgramDetails","refresher","setTemplateList","Id","getpeoplelist","getQuestionData","getTemplateData","list","catch","npages","BackButton","exportToXlsx","apiData","fileName","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","ws","aoa_to_sheet","book_new","book_append_sheet"],"sourceRoot":""}